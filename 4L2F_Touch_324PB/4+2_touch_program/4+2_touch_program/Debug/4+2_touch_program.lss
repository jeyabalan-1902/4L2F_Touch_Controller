
4+2_touch_program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00001cc8  00001d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  008001e0  008001e0  00001e3c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003639  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013aa  00000000  00000000  00005839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a5  00000000  00000000  00006be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00008388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019ff  00000000  00000000  000089c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bec  00000000  00000000  0000a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000afaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_16>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_19>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      9c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_39>
      a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e8 ec       	ldi	r30, 0xC8	; 200
      e0:	fc e1       	ldi	r31, 0x1C	; 28
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a0 3e       	cpi	r26, 0xE0	; 224
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	a0 ee       	ldi	r26, 0xE0	; 224
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	ac 3a       	cpi	r26, 0xAC	; 172
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 c5 02 	call	0x58a	; 0x58a <main>
     102:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     10a:	0e 94 ad 04 	call	0x95a	; 0x95a <system_init>

	touch_init();
     10e:	0e 94 c9 03 	call	0x792	; 0x792 <touch_init>
     112:	08 95       	ret

00000114 <__vector_16>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31

	mega_touch_timer();
     136:	0e 94 16 04 	call	0x82c	; 0x82c <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
     13a:	85 b3       	in	r24, 0x15	; 21
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	85 bb       	out	0x15, r24	; 21
}
     140:	ff 91       	pop	r31
     142:	ef 91       	pop	r30
     144:	bf 91       	pop	r27
     146:	af 91       	pop	r26
     148:	9f 91       	pop	r25
     14a:	8f 91       	pop	r24
     14c:	7f 91       	pop	r23
     14e:	6f 91       	pop	r22
     150:	5f 91       	pop	r21
     152:	4f 91       	pop	r20
     154:	3f 91       	pop	r19
     156:	2f 91       	pop	r18
     158:	0f 90       	pop	r0
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	0f 90       	pop	r0
     15e:	1f 90       	pop	r1
     160:	18 95       	reti

00000162 <SPI_MasterInit>:


void SPI_MasterInit()
{
	// Set SS, MOSI, and SCK as outputs
	DDRB |= (1 << SPI_SS_PIN) | (1 << SPI_MOSI_PIN) | (1 << SPI_SCK_PIN);
     162:	84 b1       	in	r24, 0x04	; 4
     164:	80 6b       	ori	r24, 0xB0	; 176
     166:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master
	SPCR0 = (1 << SPE) | (1 << MSTR);
     168:	80 e5       	ldi	r24, 0x50	; 80
     16a:	8c bd       	out	0x2c, r24	; 44
	// Set SS pin high (inactive)
	PORTB |= (1 << SPI_SS_PIN);
     16c:	85 b1       	in	r24, 0x05	; 5
     16e:	80 61       	ori	r24, 0x10	; 16
     170:	85 b9       	out	0x05, r24	; 5
     172:	08 95       	ret

00000174 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(uint8_t data)
{
	// Set SS pin low (activate slave)
	PORTB &= ~(1 << SPI_SS_PIN);
     174:	95 b1       	in	r25, 0x05	; 5
     176:	9f 7e       	andi	r25, 0xEF	; 239
     178:	95 b9       	out	0x05, r25	; 5
	// Start transmission
	SPDR0 = data;
     17a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while (!(SPSR0 & (1 << SPIF)))
     17c:	0d b4       	in	r0, 0x2d	; 45
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <SPI_MasterTransmit+0x8>
	{
		// Add timeout or error handling if necessary
	}
	// Set SS pin high (deactivate slave)
	PORTB |= (1 << SPI_SS_PIN);
     182:	85 b1       	in	r24, 0x05	; 5
     184:	80 61       	ori	r24, 0x10	; 16
     186:	85 b9       	out	0x05, r24	; 5
     188:	08 95       	ret

0000018a <SPI_MasterTransmitString>:
		
	}
	
}
// Function to transmit a string over SPI
void SPI_MasterTransmitString(const char* str) {
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != '\0'; i++) {
     194:	c0 e0       	ldi	r28, 0x00	; 0
     196:	d0 e0       	ldi	r29, 0x00	; 0
     198:	0c c0       	rjmp	.+24     	; 0x1b2 <SPI_MasterTransmitString+0x28>
		SPI_MasterTransmit(str[i]);
     19a:	0e 94 ba 00 	call	0x174	; 0x174 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	80 e7       	ldi	r24, 0x70	; 112
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <SPI_MasterTransmitString+0x1a>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <SPI_MasterTransmitString+0x24>
     1ae:	00 00       	nop
	}
	
}
// Function to transmit a string over SPI
void SPI_MasterTransmitString(const char* str) {
	for (int i = 0; str[i] != '\0'; i++) {
     1b0:	21 96       	adiw	r28, 0x01	; 1
     1b2:	f8 01       	movw	r30, r16
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	80 81       	ld	r24, Z
     1ba:	81 11       	cpse	r24, r1
     1bc:	ee cf       	rjmp	.-36     	; 0x19a <SPI_MasterTransmitString+0x10>
		SPI_MasterTransmit(str[i]);
		_delay_ms(100);
	}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <touchpin1>:
	}
	return 0;
}
void touchpin1() {
	// Get the status of the first touch sensor
	previous_key_status_1 = key_status_1;
     1c8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <key_status_1>
     1cc:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <previous_key_status_1>
	key_status_1 = get_sensor_state(0) & 0x80;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     1d8:	80 78       	andi	r24, 0x80	; 128
     1da:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <key_status_1>
	if (key_status_1 && !previous_key_status_1) {
     1de:	88 23       	and	r24, r24
     1e0:	c1 f0       	breq	.+48     	; 0x212 <touchpin1+0x4a>
     1e2:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <previous_key_status_1>
     1e6:	81 11       	cpse	r24, r1
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <touchpin1+0x4a>
		touch_counter_1++;
     1ea:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <touch_counter_1>
     1ee:	8f 5f       	subi	r24, 0xFF	; 255
     1f0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <touch_counter_1>
		if (touch_counter_1 == 1) {
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	29 f4       	brne	.+10     	; 0x202 <touchpin1+0x3a>
			SPI_MasterTransmitString("L1");
     1f8:	82 eb       	ldi	r24, 0xB2	; 178
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     200:	08 95       	ret
		}
		else if (touch_counter_1 == 2) {
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	31 f4       	brne	.+12     	; 0x212 <touchpin1+0x4a>
			SPI_MasterTransmitString("L1");
     206:	82 eb       	ldi	r24, 0xB2	; 178
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_1 = 0;
     20e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <touch_counter_1>
     212:	08 95       	ret

00000214 <touchpin2>:
		}
	}
}
void touchpin2() {
	// Get the status of the first touch sensor
	previous_key_status_2 = key_status_2;
     214:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <key_status_2>
     218:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <previous_key_status_2>
	key_status_2= get_sensor_state(2) & 0x80;
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     224:	80 78       	andi	r24, 0x80	; 128
     226:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <key_status_2>
	if (key_status_2 && !previous_key_status_2) {
     22a:	88 23       	and	r24, r24
     22c:	c1 f0       	breq	.+48     	; 0x25e <touchpin2+0x4a>
     22e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <previous_key_status_2>
     232:	81 11       	cpse	r24, r1
     234:	14 c0       	rjmp	.+40     	; 0x25e <touchpin2+0x4a>
		touch_counter_2++;
     236:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <touch_counter_2>
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <touch_counter_2>
		if (touch_counter_2 == 1) {
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	29 f4       	brne	.+10     	; 0x24e <touchpin2+0x3a>
			SPI_MasterTransmitString("L2");
     244:	85 eb       	ldi	r24, 0xB5	; 181
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     24c:	08 95       	ret
		}
		else if (touch_counter_2 == 2) {
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	31 f4       	brne	.+12     	; 0x25e <touchpin2+0x4a>
			SPI_MasterTransmitString("L2");
     252:	85 eb       	ldi	r24, 0xB5	; 181
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_2 = 0;
     25a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <touch_counter_2>
     25e:	08 95       	ret

00000260 <touchpin3>:
		}
	}
}
void touchpin3() {
	// Get the status of the first touch sensor
	previous_key_status_3 = key_status_3;
     260:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <key_status_3>
     264:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <previous_key_status_3>
	key_status_3 = get_sensor_state(1) & 0x80;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     270:	80 78       	andi	r24, 0x80	; 128
     272:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <key_status_3>
	if (key_status_3 && !previous_key_status_3) {
     276:	88 23       	and	r24, r24
     278:	c1 f0       	breq	.+48     	; 0x2aa <touchpin3+0x4a>
     27a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <previous_key_status_3>
     27e:	81 11       	cpse	r24, r1
     280:	14 c0       	rjmp	.+40     	; 0x2aa <touchpin3+0x4a>
		touch_counter_3++;
     282:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <touch_counter_3>
     286:	8f 5f       	subi	r24, 0xFF	; 255
     288:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <touch_counter_3>
		if (touch_counter_3 == 1) {
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	29 f4       	brne	.+10     	; 0x29a <touchpin3+0x3a>
			SPI_MasterTransmitString("L3");
     290:	88 eb       	ldi	r24, 0xB8	; 184
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     298:	08 95       	ret
		}
		else if (touch_counter_3 == 2) {
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	31 f4       	brne	.+12     	; 0x2aa <touchpin3+0x4a>
			SPI_MasterTransmitString("L3");
     29e:	88 eb       	ldi	r24, 0xB8	; 184
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_3 = 0;
     2a6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <touch_counter_3>
     2aa:	08 95       	ret

000002ac <touchpin4>:
		}
	}
}
void touchpin4() {
	// Get the status of the first touch sensor
	previous_key_status_4 = key_status_4;
     2ac:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <key_status_4>
     2b0:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <previous_key_status_4>
	key_status_4 = get_sensor_state(3) & 0x80;
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     2bc:	80 78       	andi	r24, 0x80	; 128
     2be:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <key_status_4>
	if (key_status_4 && !previous_key_status_4) {
     2c2:	88 23       	and	r24, r24
     2c4:	c1 f0       	breq	.+48     	; 0x2f6 <touchpin4+0x4a>
     2c6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <previous_key_status_4>
     2ca:	81 11       	cpse	r24, r1
     2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <touchpin4+0x4a>
		touch_counter_4++;
     2ce:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <touch_counter_4>
     2d2:	8f 5f       	subi	r24, 0xFF	; 255
     2d4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <touch_counter_4>
		if (touch_counter_4 == 1) {
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	29 f4       	brne	.+10     	; 0x2e6 <touchpin4+0x3a>
			SPI_MasterTransmitString("L4");
     2dc:	8b eb       	ldi	r24, 0xBB	; 187
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     2e4:	08 95       	ret
		}
		else if (touch_counter_4 == 2) {
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	31 f4       	brne	.+12     	; 0x2f6 <touchpin4+0x4a>
			SPI_MasterTransmitString("L4");
     2ea:	8b eb       	ldi	r24, 0xBB	; 187
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_4 = 0;
     2f2:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <touch_counter_4>
     2f6:	08 95       	ret

000002f8 <touchpin5>:
}
void touchpin5()
{
	
	// Get the status of the fourth touch sensor
	previous_key_status_5 = key_status_5;
     2f8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <key_status_5>
     2fc:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <previous_key_status_5>
	key_status_5 = get_sensor_state(4) & 0x80;
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     308:	80 78       	andi	r24, 0x80	; 128
     30a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <key_status_5>

	// Toggle LED 4 based on touch status
	if (key_status_5 && !previous_key_status_5) {
     30e:	88 23       	and	r24, r24
     310:	c1 f0       	breq	.+48     	; 0x342 <touchpin5+0x4a>
     312:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <previous_key_status_5>
     316:	81 11       	cpse	r24, r1
     318:	14 c0       	rjmp	.+40     	; 0x342 <touchpin5+0x4a>
		touch_counter_5++;
     31a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <touch_counter_5>
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <touch_counter_5>
		if (touch_counter_5 == 1)
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	29 f4       	brne	.+10     	; 0x332 <touchpin5+0x3a>
		{
			SPI_MasterTransmitString("F0");
     328:	8e eb       	ldi	r24, 0xBE	; 190
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     330:	08 95       	ret
		}
		
		else if (touch_counter_5 == 2) {
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	31 f4       	brne	.+12     	; 0x342 <touchpin5+0x4a>
			
			SPI_MasterTransmitString("F1");
     336:	81 ec       	ldi	r24, 0xC1	; 193
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_5 = 0;
     33e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <touch_counter_5>
     342:	08 95       	ret

00000344 <touchpin6>:
}



void touchpin6() {
	previous_key_status_6 = key_status_6;
     344:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <key_status_6>
     348:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <previous_key_status_6>
	key_status_6 = get_sensor_state(5) & 0x80;
     34c:	85 e0       	ldi	r24, 0x05	; 5
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     354:	80 78       	andi	r24, 0x80	; 128
     356:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <key_status_6>

	// Touch has just begun
	if (key_status_6 && !previous_key_status_6) {
     35a:	88 23       	and	r24, r24
     35c:	59 f0       	breq	.+22     	; 0x374 <touchpin6+0x30>
     35e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <previous_key_status_6>
     362:	91 11       	cpse	r25, r1
     364:	07 c0       	rjmp	.+14     	; 0x374 <touchpin6+0x30>
		second_counter = 0;
     366:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <second_counter+0x1>
     36a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <second_counter>
		touch_counter_6 = 1;  // Indicate that touch has started
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <touch_counter_6>
	}
	
	// Continuously check if the sensor is being touched
	if (key_status_6) {
     374:	88 23       	and	r24, r24
     376:	51 f0       	breq	.+20     	; 0x38c <touchpin6+0x48>
		second_counter++;
     378:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <second_counter>
     37c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <second_counter+0x1>
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <second_counter+0x1>
     386:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <second_counter>
     38a:	08 95       	ret

	}

	// Touch has just ended
	else if (!key_status_6 && previous_key_status_6) {
     38c:	81 11       	cpse	r24, r1
     38e:	1f c0       	rjmp	.+62     	; 0x3ce <touchpin6+0x8a>
     390:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <previous_key_status_6>
     394:	88 23       	and	r24, r24
     396:	d9 f0       	breq	.+54     	; 0x3ce <touchpin6+0x8a>
		// If the touch was shorter than 10 seconds
		if (second_counter > 0 && second_counter < 200 && touch_counter_6 == 1) {
     398:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <second_counter>
     39c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <second_counter+0x1>
     3a0:	89 2b       	or	r24, r25
     3a2:	79 f0       	breq	.+30     	; 0x3c2 <touchpin6+0x7e>
     3a4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <second_counter>
     3a8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <second_counter+0x1>
     3ac:	88 3c       	cpi	r24, 0xC8	; 200
     3ae:	91 05       	cpc	r25, r1
     3b0:	40 f4       	brcc	.+16     	; 0x3c2 <touchpin6+0x7e>
     3b2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <touch_counter_6>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	21 f4       	brne	.+8      	; 0x3c2 <touchpin6+0x7e>
			SPI_MasterTransmitString("U1"); // Send "L1" for touch less than 10 seconds
     3ba:	84 ec       	ldi	r24, 0xC4	; 196
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
		}
		second_counter = 0; //
     3c2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <second_counter+0x1>
     3c6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <second_counter>
		touch_counter_6 = 0; //
     3ca:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <touch_counter_6>
     3ce:	08 95       	ret

000003d0 <touchpin7>:
	}
}


void touchpin7() {
	previous_key_status_7 = key_status_7;
     3d0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <key_status_7>
     3d4:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <previous_key_status_7>
	key_status_7 = get_sensor_state(6) & 0x80;
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     3e0:	80 78       	andi	r24, 0x80	; 128
     3e2:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <key_status_7>

	
	if (key_status_7&& !previous_key_status_7) {
     3e6:	88 23       	and	r24, r24
     3e8:	59 f0       	breq	.+22     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3ea:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <previous_key_status_7>
     3ee:	91 11       	cpse	r25, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
		second_counter_2 = 0;
     3f2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <second_counter_2+0x1>
     3f6:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <second_counter_2>
		touch_counter_7 = 1;
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <touch_counter_7>
	}
	
	
	if (key_status_7) {
     400:	88 23       	and	r24, r24
     402:	51 f0       	breq	.+20     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		second_counter_2++;
     404:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <second_counter_2>
     408:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <second_counter_2+0x1>
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <second_counter_2+0x1>
     412:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <second_counter_2>
     416:	08 95       	ret

	}

	
	else if (!key_status_7 && previous_key_status_7) {
     418:	81 11       	cpse	r24, r1
     41a:	1f c0       	rjmp	.+62     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     41c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <previous_key_status_7>
     420:	88 23       	and	r24, r24
     422:	d9 f0       	breq	.+54     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		
		if (second_counter_2 > 0 && second_counter_2 < 200 && touch_counter_7 == 1) {
     424:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <second_counter_2>
     428:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <second_counter_2+0x1>
     42c:	89 2b       	or	r24, r25
     42e:	79 f0       	breq	.+30     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     430:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <second_counter_2>
     434:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <second_counter_2+0x1>
     438:	88 3c       	cpi	r24, 0xC8	; 200
     43a:	91 05       	cpc	r25, r1
     43c:	40 f4       	brcc	.+16     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     43e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <touch_counter_7>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	21 f4       	brne	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			SPI_MasterTransmitString("D1");
     446:	87 ec       	ldi	r24, 0xC7	; 199
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
		}
		second_counter_2 = 0;
     44e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <second_counter_2+0x1>
     452:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <second_counter_2>
		touch_counter_7 = 0;
     456:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <touch_counter_7>
     45a:	08 95       	ret

0000045c <touchpin8>:

void touchpin8()
{
	
	// Get the status of the fourth touch sensor
	previous_key_status_8 = key_status_8;
     45c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <key_status_8>
     460:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <previous_key_status_8>
	key_status_8 = get_sensor_state(7) & 0x80;
     464:	87 e0       	ldi	r24, 0x07	; 7
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     46c:	80 78       	andi	r24, 0x80	; 128
     46e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <key_status_8>

	// Toggle LED 4 based on touch status
	if (key_status_8 && !previous_key_status_8) {
     472:	88 23       	and	r24, r24
     474:	c1 f0       	breq	.+48     	; 0x4a6 <touchpin8+0x4a>
     476:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <previous_key_status_8>
     47a:	81 11       	cpse	r24, r1
     47c:	14 c0       	rjmp	.+40     	; 0x4a6 <touchpin8+0x4a>
		touch_counter_8++;
     47e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <touch_counter_8>
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <touch_counter_8>
		if (touch_counter_8 == 1)
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	29 f4       	brne	.+10     	; 0x496 <touchpin8+0x3a>
		{
			SPI_MasterTransmitString("F2");
     48c:	8a ec       	ldi	r24, 0xCA	; 202
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     494:	08 95       	ret
		}
		
		else if (touch_counter_8 == 2) {
     496:	82 30       	cpi	r24, 0x02	; 2
     498:	31 f4       	brne	.+12     	; 0x4a6 <touchpin8+0x4a>
			
			SPI_MasterTransmitString("F3");
     49a:	8d ec       	ldi	r24, 0xCD	; 205
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			
			touch_counter_8 = 0;
     4a2:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <touch_counter_8>
     4a6:	08 95       	ret

000004a8 <touchpin9>:
void touchpin9()
{
	

	// Get the status of the fourth touch sensor
	previous_key_status_9 = key_status_9;
     4a8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <key_status_9>
     4ac:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <previous_key_status_9>
	key_status_9 = get_sensor_state(8) & 0x80;
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     4b8:	80 78       	andi	r24, 0x80	; 128
     4ba:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <key_status_9>
	
	// Toggle LED 4 based on touch status
	if (key_status_9 && !previous_key_status_9) {
     4be:	88 23       	and	r24, r24
     4c0:	69 f0       	breq	.+26     	; 0x4dc <touchpin9+0x34>
     4c2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <previous_key_status_9>
     4c6:	81 11       	cpse	r24, r1
     4c8:	09 c0       	rjmp	.+18     	; 0x4dc <touchpin9+0x34>
		touch_counter_9++;
     4ca:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <touch_counter_9>
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <touch_counter_9>
		
		SPI_MasterTransmitString("U2");
     4d4:	80 ed       	ldi	r24, 0xD0	; 208
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     4dc:	08 95       	ret

000004de <touchpin10>:

void touchpin10()
{
	
	// Get the status of the fourth touch sensor
	previous_key_status_10 = key_status_10;
     4de:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <key_status_10>
     4e2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <previous_key_status_10>
	key_status_10 = get_sensor_state(9) & 0x80;
     4e6:	89 e0       	ldi	r24, 0x09	; 9
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
     4ee:	80 78       	andi	r24, 0x80	; 128
     4f0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <key_status_10>
	
	// Toggle LED 4 based on touch status
	if (key_status_10 && !previous_key_status_10) {
     4f4:	88 23       	and	r24, r24
     4f6:	69 f0       	breq	.+26     	; 0x512 <touchpin10+0x34>
     4f8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <previous_key_status_10>
     4fc:	81 11       	cpse	r24, r1
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <touchpin10+0x34>
		touch_counter_10++;
     500:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
		
		SPI_MasterTransmitString("D2");
     50a:	83 ed       	ldi	r24, 0xD3	; 211
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
     512:	08 95       	ret

00000514 <loop>:
	// Set SS pin high (deactivate slave)
	PORTB |= (1 << SPI_SS_PIN);
}
void loop()
{
	touch_process();
     514:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <touch_process>
	// Check if touch measurement is done
	if (measurement_done_touch == 1)
     518:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <measurement_done_touch>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	a1 f5       	brne	.+104    	; 0x588 <loop+0x74>
	{
		measurement_done_touch = 0;
     520:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <measurement_done_touch>
		touchpin1();
     524:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <touchpin1>
		touchpin2();
     528:	0e 94 0a 01 	call	0x214	; 0x214 <touchpin2>
		touchpin3();
     52c:	0e 94 30 01 	call	0x260	; 0x260 <touchpin3>
		touchpin4();
     530:	0e 94 56 01 	call	0x2ac	; 0x2ac <touchpin4>
		touchpin5();
     534:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <touchpin5>
		touchpin6();
     538:	0e 94 a2 01 	call	0x344	; 0x344 <touchpin6>
		touchpin7();
     53c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <touchpin7>
		touchpin8();
     540:	0e 94 2e 02 	call	0x45c	; 0x45c <touchpin8>
		touchpin9();
     544:	0e 94 54 02 	call	0x4a8	; 0x4a8 <touchpin9>
		touchpin10();
     548:	0e 94 6f 02 	call	0x4de	; 0x4de <touchpin10>

		// Check if both touchpin6 (second_counter) and touchpin7 (second_counter_2) have been pressed for 10 seconds
		if (second_counter >= 200 && second_counter_2 >= 200) {
     54c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <second_counter>
     550:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <second_counter+0x1>
     554:	88 3c       	cpi	r24, 0xC8	; 200
     556:	91 05       	cpc	r25, r1
     558:	b8 f0       	brcs	.+46     	; 0x588 <loop+0x74>
     55a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <second_counter_2>
     55e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <second_counter_2+0x1>
     562:	88 3c       	cpi	r24, 0xC8	; 200
     564:	91 05       	cpc	r25, r1
     566:	80 f0       	brcs	.+32     	; 0x588 <loop+0x74>
			SPI_MasterTransmitString("P1");
     568:	86 ed       	ldi	r24, 0xD6	; 214
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_MasterTransmitString>
			second_counter = 0;
     570:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <second_counter+0x1>
     574:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <second_counter>
			second_counter_2 = 0;
     578:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <second_counter_2+0x1>
     57c:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <second_counter_2>
			touch_counter_1 = 0;
     580:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <touch_counter_1>
			touch_counter_2 = 0;
     584:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <touch_counter_2>
     588:	08 95       	ret

0000058a <main>:
	}
}
int main(void)
{
	/* Initializes MCU, drivers, and middleware */
	atmel_start_init();
     58a:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
	/* Enable interrupts */
	cpu_irq_enable();
     58e:	78 94       	sei
	// Initialize SPI as master
	SPI_MasterInit();
     590:	0e 94 b1 00 	call	0x162	; 0x162 <SPI_MasterInit>
	while (1)
	{
		loop();
     594:	0e 94 8a 02 	call	0x514	; 0x514 <loop>
     598:	fd cf       	rjmp	.-6      	; 0x594 <main+0xa>

0000059a <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     59a:	08 95       	ret

0000059c <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     59c:	cf 93       	push	r28
     59e:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     5a0:	0e 94 5c 05 	call	0xab8	; 0xab8 <USART_is_tx_ready>
     5a4:	88 23       	and	r24, r24
     5a6:	e1 f3       	breq	.-8      	; 0x5a0 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     5a8:	8c 2f       	mov	r24, r28
     5aa:	0e 94 6c 05 	call	0xad8	; 0xad8 <USART_write>

	while (USART_is_tx_busy())
     5ae:	0e 94 62 05 	call	0xac4	; 0xac4 <USART_is_tx_busy>
     5b2:	81 11       	cpse	r24, r1
     5b4:	fc cf       	rjmp	.-8      	; 0x5ae <datastreamer_transmit+0x12>
		;
}
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <datastreamer_output+0xa>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t    sequence = 0u;
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
     5c8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sequence.2563>
     5cc:	8f 70       	andi	r24, 0x0F	; 15
	if (send_header == 0) {
     5ce:	51 f0       	breq	.+20     	; 0x5e4 <datastreamer_output+0x2a>
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <datastreamer_output+0x34>
		for (i = 0; i < sizeof(data); i++) {
			datastreamer_transmit(data[i]);
     5d2:	f8 01       	movw	r30, r16
     5d4:	e0 50       	subi	r30, 0x00	; 0
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	80 81       	ld	r24, Z
     5da:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <datastreamer_output+0x2e>
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	03 31       	cpi	r16, 0x13	; 19
     5ea:	11 05       	cpc	r17, r1
     5ec:	90 f3       	brcs	.-28     	; 0x5d2 <datastreamer_output+0x18>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     5ee:	85 e5       	ldi	r24, 0x55	; 85
     5f0:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     5f4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sequence.2563>
     5f8:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     5fc:	1a 82       	std	Y+2, r1	; 0x02
     5fe:	19 82       	std	Y+1, r1	; 0x01
     600:	4e c0       	rjmp	.+156    	; 0x69e <datastreamer_output+0xe4>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	0e 94 2d 04 	call	0x85a	; 0x85a <get_sensor_node_signal>
     60a:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     60c:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     610:	81 2f       	mov	r24, r17
     612:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	0e 94 3a 04 	call	0x874	; 0x874 <get_sensor_node_reference>
     61e:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     620:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     624:	81 2f       	mov	r24, r17
     626:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	0e 94 2d 04 	call	0x85a	; 0x85a <get_sensor_node_signal>
     632:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	0e 94 3a 04 	call	0x874	; 0x874 <get_sensor_node_reference>
     63c:	08 1b       	sub	r16, r24
     63e:	19 0b       	sbc	r17, r25
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     640:	80 2f       	mov	r24, r16
     642:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     646:	81 2f       	mov	r24, r17
     648:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	0e 94 46 04 	call	0x88c	; 0x88c <get_sensor_cc_val>
     654:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     656:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     65a:	81 2f       	mov	r24, r17
     65c:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	0e 94 53 04 	call	0x8a6	; 0x8a6 <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     668:	88 23       	and	r24, r24
     66a:	24 f4       	brge	.+8      	; 0x674 <datastreamer_output+0xba>
			datastreamer_transmit(0x01);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
     672:	03 c0       	rjmp	.+6      	; 0x67a <datastreamer_output+0xc0>
		} else {
			datastreamer_transmit(0x00);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	fc 01       	movw	r30, r24
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	8e 0f       	add	r24, r30
     686:	9f 1f       	adc	r25, r31
     688:	fc 01       	movw	r30, r24
     68a:	e5 5e       	subi	r30, 0xE5	; 229
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
	// Start token
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	0a 97       	sbiw	r24, 0x0a	; 10
     6a4:	08 f4       	brcc	.+2      	; 0x6a8 <datastreamer_output+0xee>
     6a6:	ad cf       	rjmp	.-166    	; 0x602 <datastreamer_output+0x48>
		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
	}

	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     6a8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <module_error_code>
     6ac:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

	/* Frame End */
	datastreamer_transmit(sequence++);
     6b0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sequence.2563>
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	98 0f       	add	r25, r24
     6b8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <sequence.2563>
     6bc:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     6c0:	8a ea       	ldi	r24, 0xAA	; 170
     6c2:	0e 94 ce 02 	call	0x59c	; 0x59c <datastreamer_transmit>
}
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     6d4:	82 b1       	in	r24, 0x02	; 2
     6d6:	87 7f       	andi	r24, 0xF7	; 247
     6d8:	82 b9       	out	0x02, r24	; 2
     6da:	82 b1       	in	r24, 0x02	; 2
     6dc:	8b 7f       	andi	r24, 0xFB	; 251
     6de:	82 b9       	out	0x02, r24	; 2
     6e0:	82 b1       	in	r24, 0x02	; 2
     6e2:	8f 77       	andi	r24, 0x7F	; 127
     6e4:	82 b9       	out	0x02, r24	; 2
     6e6:	85 b1       	in	r24, 0x05	; 5
     6e8:	8d 7f       	andi	r24, 0xFD	; 253
     6ea:	85 b9       	out	0x05, r24	; 5
     6ec:	82 b1       	in	r24, 0x02	; 2
     6ee:	8f 7d       	andi	r24, 0xDF	; 223
     6f0:	82 b9       	out	0x02, r24	; 2
     6f2:	82 b1       	in	r24, 0x02	; 2
     6f4:	8f 7e       	andi	r24, 0xEF	; 239
     6f6:	82 b9       	out	0x02, r24	; 2
     6f8:	82 b1       	in	r24, 0x02	; 2
     6fa:	8f 7b       	andi	r24, 0xBF	; 191
     6fc:	82 b9       	out	0x02, r24	; 2
     6fe:	82 b1       	in	r24, 0x02	; 2
     700:	8e 7f       	andi	r24, 0xFE	; 254
     702:	82 b9       	out	0x02, r24	; 2
     704:	82 b1       	in	r24, 0x02	; 2
     706:	8d 7f       	andi	r24, 0xFD	; 253
     708:	82 b9       	out	0x02, r24	; 2
     70a:	85 b1       	in	r24, 0x05	; 5
     70c:	8e 7f       	andi	r24, 0xFE	; 254
     70e:	85 b9       	out	0x05, r24	; 5
     710:	08 95       	ret

00000712 <qtm_measure_complete_callback>:
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <touch_postprocess_request>
     718:	08 95       	ret

0000071a <touch_sensors_config>:
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	83 e4       	ldi	r24, 0x43	; 67
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 1b 0c 	call	0x1836	; 0x1836 <qtm_ptc_init_acquisition_module>
     726:	88 e5       	ldi	r24, 0x58	; 88
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <qtm_ptc_qtlib_assign_signal_memory>
     72e:	c0 e0       	ldi	r28, 0x00	; 0
     730:	d0 e0       	ldi	r29, 0x00	; 0
     732:	0b c0       	rjmp	.+22     	; 0x74a <touch_sensors_config+0x30>
     734:	be 01       	movw	r22, r28
     736:	83 e4       	ldi	r24, 0x43	; 67
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <qtm_enable_sensor_node>
     73e:	be 01       	movw	r22, r28
     740:	83 e4       	ldi	r24, 0x43	; 67
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <qtm_calibrate_sensor_node>
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	ca 30       	cpi	r28, 0x0A	; 10
     74c:	d1 05       	cpc	r29, r1
     74e:	90 f3       	brcs	.-28     	; 0x734 <touch_sensors_config+0x1a>
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	0f c0       	rjmp	.+30     	; 0x774 <touch_sensors_config+0x5a>
     756:	ae 01       	movw	r20, r28
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	44 0f       	add	r20, r20
     75e:	55 1f       	adc	r21, r21
     760:	4c 0f       	add	r20, r28
     762:	5d 1f       	adc	r21, r29
     764:	4a 5d       	subi	r20, 0xDA	; 218
     766:	5d 4f       	sbci	r21, 0xFD	; 253
     768:	6c 2f       	mov	r22, r28
     76a:	83 e1       	ldi	r24, 0x13	; 19
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 e7 05 	call	0xbce	; 0xbce <qtm_init_sensor_key>
     772:	21 96       	adiw	r28, 0x01	; 1
     774:	ca 30       	cpi	r28, 0x0A	; 10
     776:	d1 05       	cpc	r29, r1
     778:	70 f3       	brcs	.-36     	; 0x756 <touch_sensors_config+0x3c>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <qtm_error_callback>:
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <module_error_code>
     788:	0e 94 dd 02 	call	0x5ba	; 0x5ba <datastreamer_output>
     78c:	08 95       	ret

0000078e <Timer_set_comp_a>:
     78e:	87 bd       	out	0x27, r24	; 39
     790:	08 95       	ret

00000792 <touch_init>:
     792:	88 e0       	ldi	r24, 0x08	; 8
     794:	0e 94 c7 03 	call	0x78e	; 0x78e <Timer_set_comp_a>
     798:	e3 e6       	ldi	r30, 0x63	; 99
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	87 7f       	andi	r24, 0xF7	; 247
     7a0:	80 83       	st	Z, r24
     7a2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <touch_ptc_pin_config>
     7a6:	0e 94 8d 03 	call	0x71a	; 0x71a <touch_sensors_config>
     7aa:	0e 94 cd 02 	call	0x59a	; 0x59a <datastreamer_init>
     7ae:	08 95       	ret

000007b0 <touch_process>:
     7b0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <time_to_measure_touch_flag>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	51 f4       	brne	.+20     	; 0x7cc <touch_process+0x1c>
     7b8:	69 e8       	ldi	r22, 0x89	; 137
     7ba:	73 e0       	ldi	r23, 0x03	; 3
     7bc:	83 e4       	ldi	r24, 0x43	; 67
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 b6 0c 	call	0x196c	; 0x196c <qtm_ptc_start_measurement_seq>
     7c4:	81 11       	cpse	r24, r1
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <touch_process+0x1c>
     7c8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <time_to_measure_touch_flag>
     7cc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <touch_postprocess_request>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	19 f5       	brne	.+70     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7d4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <touch_postprocess_request>
     7d8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <qtm_acquisition_process>
     7dc:	81 11       	cpse	r24, r1
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <touch_process+0x44>
     7e0:	83 e1       	ldi	r24, 0x13	; 19
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 06 06 	call	0xc0c	; 0xc0c <qtm_key_sensors_process>
     7e8:	88 23       	and	r24, r24
     7ea:	39 f0       	breq	.+14     	; 0x7fa <touch_process+0x4a>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 c1 03 	call	0x782	; 0x782 <qtm_error_callback>
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <touch_process+0x4a>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 c1 03 	call	0x782	; 0x782 <qtm_error_callback>
     7fa:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <qtlib_key_set1>
     7fe:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <qtlib_key_set1+0x1>
     802:	80 81       	ld	r24, Z
     804:	88 23       	and	r24, r24
     806:	24 f4       	brge	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <time_to_measure_touch_flag>
     80e:	03 c0       	rjmp	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <measurement_done_touch>
     816:	0e 94 dd 02 	call	0x5ba	; 0x5ba <datastreamer_output>
     81a:	08 95       	ret

0000081c <touch_timer_handler>:
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <time_to_measure_touch_flag>
     822:	84 e1       	ldi	r24, 0x14	; 20
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <qtm_update_qtlib_timer>
     82a:	08 95       	ret

0000082c <mega_touch_timer>:
     82c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <touch_time_counter.2335>
     830:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <touch_time_counter.2335+0x1>
     834:	44 97       	sbiw	r24, 0x14	; 20
     836:	39 f4       	brne	.+14     	; 0x846 <mega_touch_timer+0x1a>
     838:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <touch_time_counter.2335+0x1>
     83c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <touch_time_counter.2335>
     840:	0e 94 0e 04 	call	0x81c	; 0x81c <touch_timer_handler>
     844:	08 95       	ret
     846:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <touch_time_counter.2335>
     84a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <touch_time_counter.2335+0x1>
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <touch_time_counter.2335+0x1>
     854:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <touch_time_counter.2335>
     858:	08 95       	ret

0000085a <get_sensor_node_signal>:
     85a:	fc 01       	movw	r30, r24
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	8e 0f       	add	r24, r30
     866:	9f 1f       	adc	r25, r31
     868:	fc 01       	movw	r30, r24
     86a:	ea 5d       	subi	r30, 0xDA	; 218
     86c:	fd 4f       	sbci	r31, 0xFD	; 253
     86e:	81 81       	ldd	r24, Z+1	; 0x01
     870:	92 81       	ldd	r25, Z+2	; 0x02
     872:	08 95       	ret

00000874 <get_sensor_node_reference>:
     874:	fc 01       	movw	r30, r24
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	e4 59       	subi	r30, 0x94	; 148
     884:	fd 4f       	sbci	r31, 0xFD	; 253
     886:	84 81       	ldd	r24, Z+4	; 0x04
     888:	95 81       	ldd	r25, Z+5	; 0x05
     88a:	08 95       	ret

0000088c <get_sensor_cc_val>:
     88c:	fc 01       	movw	r30, r24
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	8e 0f       	add	r24, r30
     898:	9f 1f       	adc	r25, r31
     89a:	fc 01       	movw	r30, r24
     89c:	ea 5d       	subi	r30, 0xDA	; 218
     89e:	fd 4f       	sbci	r31, 0xFD	; 253
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	94 81       	ldd	r25, Z+4	; 0x04
     8a4:	08 95       	ret

000008a6 <get_sensor_state>:
     8a6:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <qtlib_key_set1+0x4>
     8aa:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <qtlib_key_set1+0x5>
     8ae:	9c 01       	movw	r18, r24
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	e8 0f       	add	r30, r24
     8be:	f9 1f       	adc	r31, r25
     8c0:	80 81       	ld	r24, Z
     8c2:	08 95       	ret

000008c4 <__vector_39>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
	qtm_m324pb_ptc_handler_eoc();
     8e6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <qtm_m324pb_ptc_handler_eoc>
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
     90c:	84 b1       	in	r24, 0x04	; 4
     90e:	8f 7b       	andi	r24, 0xBF	; 191
     910:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
     912:	85 b1       	in	r24, 0x05	; 5
     914:	8f 7b       	andi	r24, 0xBF	; 191
     916:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     918:	84 b1       	in	r24, 0x04	; 4
     91a:	80 62       	ori	r24, 0x20	; 32
     91c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     91e:	85 b1       	in	r24, 0x05	; 5
     920:	8f 7d       	andi	r24, 0xDF	; 223
     922:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     924:	84 b1       	in	r24, 0x04	; 4
     926:	80 68       	ori	r24, 0x80	; 128
     928:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     92a:	85 b1       	in	r24, 0x05	; 5
     92c:	8f 77       	andi	r24, 0x7F	; 127
     92e:	85 b9       	out	0x05, r24	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     930:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SPI_0_init>
     934:	08 95       	ret

00000936 <Timer_initialization>:
}

void Timer_initialization(void)
{

	Timer_init();
     936:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Timer_init>
     93a:	08 95       	ret

0000093c <USART_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     93c:	8a b1       	in	r24, 0x0a	; 10
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     942:	8b b1       	in	r24, 0x0b	; 11
     944:	8e 7f       	andi	r24, 0xFE	; 254
     946:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     948:	8a b1       	in	r24, 0x0a	; 10
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     94e:	8b b1       	in	r24, 0x0b	; 11
     950:	8d 7f       	andi	r24, 0xFD	; 253
     952:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_init();
     954:	0e 94 4b 05 	call	0xa96	; 0xa96 <USART_init>
     958:	08 95       	ret

0000095a <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
     966:	9f e0       	ldi	r25, 0x0F	; 15
     968:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     96c:	91 b1       	in	r25, 0x01	; 1
     96e:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
     970:	92 b1       	in	r25, 0x02	; 2
     972:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     974:	94 b1       	in	r25, 0x04	; 4
     976:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     978:	95 b1       	in	r25, 0x05	; 5
     97a:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     97c:	97 b1       	in	r25, 0x07	; 7
     97e:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
     980:	98 b1       	in	r25, 0x08	; 8
     982:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     984:	9a b1       	in	r25, 0x0a	; 10
     986:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     988:	9b b1       	in	r25, 0x0b	; 11
     98a:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
     98c:	8d b1       	in	r24, 0x0d	; 13
     98e:	80 78       	andi	r24, 0x80	; 128
     990:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
     992:	8e b1       	in	r24, 0x0e	; 14
     994:	8f 67       	ori	r24, 0x7F	; 127
     996:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	60 e8       	ldi	r22, 0x80	; 128
     99c:	81 e6       	ldi	r24, 0x61	; 97
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     9a4:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     9a6:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
     9a8:	78 94       	sei
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
     9aa:	0e 94 86 04 	call	0x90c	; 0x90c <SPI_0_initialization>

	Timer_initialization();
     9ae:	0e 94 9b 04 	call	0x936	; 0x936 <Timer_initialization>

	USART_initialization();
     9b2:	0e 94 9e 04 	call	0x93c	; 0x93c <USART_initialization>
     9b6:	08 95       	ret

000009b8 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     9b8:	2f b7       	in	r18, 0x3f	; 63
	cli
     9ba:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     9bc:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     9be:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     9c0:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     9c2:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     9c4:	08 95       	ret

000009c6 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
     9c6:	e4 e6       	ldi	r30, 0x64	; 100
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8b 7f       	andi	r24, 0xFB	; 251
     9ce:	80 83       	st	Z, r24
     9d0:	80 ed       	ldi	r24, 0xD0	; 208
     9d2:	8c bd       	out	0x2c, r24	; 44
     9d4:	e9 e0       	ldi	r30, 0x09	; 9
     9d6:	f2 e0       	ldi	r31, 0x02	; 2
     9d8:	10 82       	st	Z, r1
     9da:	16 82       	std	Z+6, r1	; 0x06
     9dc:	15 82       	std	Z+5, r1	; 0x05
     9de:	08 95       	ret

000009e0 <__vector_19>:
}

ISR(SPI0_STC_vect)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
     a02:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;

	if (SPI_0_desc.type != SPI_WRITE) {
     a04:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <SPI_0_desc+0x4>
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	29 f0       	breq	.+10     	; 0xa16 <__vector_19+0x36>
		*SPI_0_desc.data = rdata;
     a0c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <SPI_0_desc+0x1>
     a10:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <SPI_0_desc+0x2>
     a14:	90 83       	st	Z, r25
	}

	SPI_0_desc.data++;
     a16:	e9 e0       	ldi	r30, 0x09	; 9
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	a1 81       	ldd	r26, Z+1	; 0x01
     a1c:	b2 81       	ldd	r27, Z+2	; 0x02
     a1e:	9d 01       	movw	r18, r26
     a20:	2f 5f       	subi	r18, 0xFF	; 255
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	32 83       	std	Z+2, r19	; 0x02
     a26:	21 83       	std	Z+1, r18	; 0x01

	if (SPI_0_desc.type != SPI_READ)
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	19 f0       	breq	.+6      	; 0xa32 <__vector_19+0x52>
		wdata = *SPI_0_desc.data;
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	9c 91       	ld	r25, X
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <__vector_19+0x54>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
	uint8_t wdata = 0;
     a32:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
     a34:	e9 e0       	ldi	r30, 0x09	; 9
     a36:	f2 e0       	ldi	r31, 0x02	; 2
     a38:	83 81       	ldd	r24, Z+3	; 0x03
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
     a3e:	88 23       	and	r24, r24
     a40:	11 f0       	breq	.+4      	; 0xa46 <__vector_19+0x66>
		// more data to send, send a byte
		SPDR0 = wdata;
     a42:	9e bd       	out	0x2e, r25	; 46
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <__vector_19+0x7a>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
     a46:	e9 e0       	ldi	r30, 0x09	; 9
     a48:	f2 e0       	ldi	r31, 0x02	; 2
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
     a4e:	05 80       	ldd	r0, Z+5	; 0x05
     a50:	f6 81       	ldd	r31, Z+6	; 0x06
     a52:	e0 2d       	mov	r30, r0
     a54:	30 97       	sbiw	r30, 0x00	; 0
     a56:	09 f0       	breq	.+2      	; 0xa5a <__vector_19+0x7a>
			SPI_0_desc.cb();
     a58:	09 95       	icall
		}
	}
}
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <Timer_init>:
 */
int8_t Timer_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
     a7c:	e4 e6       	ldi	r30, 0x64	; 100
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 7d       	andi	r24, 0xDF	; 223
     a84:	80 83       	st	Z, r24

	TCCR0A = (0 << COM0A1) | (0 << COM0A0)   /* Normal port operation, OCA disconnected */
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	84 bd       	out	0x24, r24	; 36
	         | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	         | (1 << WGM01) | (0 << WGM00);  /* TC8 Mode 2 CTC */

	TCCR0B = 0                                          /* TC8 Mode 2 CTC */
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	95 bd       	out	0x25, r25	; 37
	         | (1 << CS02) | (0 << CS01) | (1 << CS00); /* IO clock divided by 1024 */

	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
     a8e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
}
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 95       	ret

00000a96 <USART_init>:
uint8_t USART_read()
{
	while (!(UCSR0A & (1 << RXC)))
		;
	return UDR0;
}
     a96:	e4 e6       	ldi	r30, 0x64	; 100
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8d 7f       	andi	r24, 0xFD	; 253
     a9e:	80 83       	st	Z, r24
     aa0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     aa4:	8c e0       	ldi	r24, 0x0C	; 12
     aa6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     aaa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <USART_is_tx_ready>:
     ab8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     abc:	85 fb       	bst	r24, 5
     abe:	88 27       	eor	r24, r24
     ac0:	80 f9       	bld	r24, 0
     ac2:	08 95       	ret

00000ac4 <USART_is_tx_busy>:
     ac4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ac8:	82 95       	swap	r24
     aca:	86 95       	lsr	r24
     acc:	86 95       	lsr	r24
     ace:	83 70       	andi	r24, 0x03	; 3
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	89 27       	eor	r24, r25
     ad4:	81 70       	andi	r24, 0x01	; 1
     ad6:	08 95       	ret

00000ad8 <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE)))
     ad8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     adc:	95 ff       	sbrs	r25, 5
     ade:	fc cf       	rjmp	.-8      	; 0xad8 <USART_write>
		;
	UDR0 = data;
     ae0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ae4:	08 95       	ret

00000ae6 <check_for_aks_block>:
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	ae 81       	ldd	r26, Y+6	; 0x06
     af8:	bf 81       	ldd	r27, Y+7	; 0x07
     afa:	eb 01       	movw	r28, r22
     afc:	cc 0f       	add	r28, r28
     afe:	dd 1f       	adc	r29, r29
     b00:	c6 0f       	add	r28, r22
     b02:	d7 1f       	adc	r29, r23
     b04:	ca 0f       	add	r28, r26
     b06:	db 1f       	adc	r29, r27
     b08:	fa 80       	ldd	r15, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	44 81       	ldd	r20, Z+4	; 0x04
     b0e:	55 81       	ldd	r21, Z+5	; 0x05
     b10:	e6 e0       	ldi	r30, 0x06	; 6
     b12:	e6 9f       	mul	r30, r22
     b14:	90 01       	movw	r18, r0
     b16:	e7 9f       	mul	r30, r23
     b18:	30 0d       	add	r19, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8a 01       	movw	r16, r20
     b1e:	02 0f       	add	r16, r18
     b20:	13 1f       	adc	r17, r19
     b22:	f8 01       	movw	r30, r16
     b24:	22 81       	ldd	r18, Z+2	; 0x02
     b26:	33 81       	ldd	r19, Z+3	; 0x03
     b28:	f9 01       	movw	r30, r18
     b2a:	21 81       	ldd	r18, Z+1	; 0x01
     b2c:	32 81       	ldd	r19, Z+2	; 0x02
     b2e:	f8 01       	movw	r30, r16
     b30:	04 81       	ldd	r16, Z+4	; 0x04
     b32:	15 81       	ldd	r17, Z+5	; 0x05
     b34:	20 1b       	sub	r18, r16
     b36:	31 0b       	sbc	r19, r17
     b38:	e8 81       	ld	r30, Y
     b3a:	2e 1b       	sub	r18, r30
     b3c:	31 09       	sbc	r19, r1
     b3e:	ec 01       	movw	r28, r24
     b40:	ea 81       	ldd	r30, Y+2	; 0x02
     b42:	fb 81       	ldd	r31, Y+3	; 0x03
     b44:	00 81       	ld	r16, Z
     b46:	11 81       	ldd	r17, Z+1	; 0x01
     b48:	fa 01       	movw	r30, r20
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	40 17       	cp	r20, r16
     b50:	51 07       	cpc	r21, r17
     b52:	39 f1       	breq	.+78     	; 0xba2 <check_for_aks_block+0xbc>
     b54:	46 17       	cp	r20, r22
     b56:	57 07       	cpc	r21, r23
     b58:	f9 f0       	breq	.+62     	; 0xb98 <check_for_aks_block+0xb2>
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8c 91       	ld	r24, X
     b5e:	12 97       	sbiw	r26, 0x02	; 2
     b60:	f8 12       	cpse	r15, r24
     b62:	1a c0       	rjmp	.+52     	; 0xb98 <check_for_aks_block+0xb2>
     b64:	80 81       	ld	r24, Z
     b66:	85 58       	subi	r24, 0x85	; 133
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	e8 f0       	brcs	.+58     	; 0xba6 <check_for_aks_block+0xc0>
     b6c:	c4 80       	ldd	r12, Z+4	; 0x04
     b6e:	d5 80       	ldd	r13, Z+5	; 0x05
     b70:	82 81       	ldd	r24, Z+2	; 0x02
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	ec 01       	movw	r28, r24
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	c8 16       	cp	r12, r24
     b7c:	d9 06       	cpc	r13, r25
     b7e:	60 f4       	brcc	.+24     	; 0xb98 <check_for_aks_block+0xb2>
     b80:	8c 19       	sub	r24, r12
     b82:	9d 09       	sbc	r25, r13
     b84:	cc 91       	ld	r28, X
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	c8 17       	cp	r28, r24
     b8a:	d9 07       	cpc	r29, r25
     b8c:	28 f4       	brcc	.+10     	; 0xb98 <check_for_aks_block+0xb2>
     b8e:	8c 1b       	sub	r24, r28
     b90:	9d 0b       	sbc	r25, r29
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	38 f0       	brcs	.+14     	; 0xba6 <check_for_aks_block+0xc0>
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	36 96       	adiw	r30, 0x06	; 6
     ba0:	d6 cf       	rjmp	.-84     	; 0xb4e <check_for_aks_block+0x68>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <check_for_aks_block+0xc2>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	08 95       	ret

00000bb8 <qtm_update_qtlib_timer>:
     bb8:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <qtm_local_ms_timecount>
     bbc:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <qtm_local_ms_timecount+0x1>
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <qtm_local_ms_timecount+0x1>
     bc8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <qtm_local_ms_timecount>
     bcc:	08 95       	ret

00000bce <qtm_init_sensor_key>:
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	d9 f0       	breq	.+54     	; 0xc08 <qtm_init_sensor_key+0x3a>
     bd2:	41 15       	cp	r20, r1
     bd4:	51 05       	cpc	r21, r1
     bd6:	c1 f0       	breq	.+48     	; 0xc08 <qtm_init_sensor_key+0x3a>
     bd8:	26 e0       	ldi	r18, 0x06	; 6
     bda:	62 9f       	mul	r22, r18
     bdc:	b0 01       	movw	r22, r0
     bde:	11 24       	eor	r1, r1
     be0:	dc 01       	movw	r26, r24
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	15 97       	sbiw	r26, 0x05	; 5
     bea:	e6 0f       	add	r30, r22
     bec:	f7 1f       	adc	r31, r23
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	20 83       	st	Z, r18
     bf2:	14 96       	adiw	r26, 0x04	; 4
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	15 97       	sbiw	r26, 0x05	; 5
     bfa:	fc 01       	movw	r30, r24
     bfc:	e6 0f       	add	r30, r22
     bfe:	f7 1f       	adc	r31, r23
     c00:	53 83       	std	Z+3, r21	; 0x03
     c02:	42 83       	std	Z+2, r20	; 0x02
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret
     c08:	8b e0       	ldi	r24, 0x0B	; 11
     c0a:	08 95       	ret

00000c0c <qtm_key_sensors_process>:
     c0c:	2f 92       	push	r2
     c0e:	3f 92       	push	r3
     c10:	4f 92       	push	r4
     c12:	5f 92       	push	r5
     c14:	6f 92       	push	r6
     c16:	7f 92       	push	r7
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	09 f4       	brne	.+2      	; 0xc36 <qtm_key_sensors_process+0x2a>
     c34:	7e c3       	rjmp	.+1788   	; 0x1332 <qtm_key_sensors_process+0x726>
     c36:	ec 01       	movw	r28, r24
     c38:	a1 2c       	mov	r10, r1
     c3a:	b1 2c       	mov	r11, r1
     c3c:	81 2c       	mov	r8, r1
     c3e:	91 2c       	mov	r9, r1
     c40:	21 2c       	mov	r2, r1
     c42:	d1 2c       	mov	r13, r1
     c44:	55 24       	eor	r5, r5
     c46:	53 94       	inc	r5
     c48:	33 e0       	ldi	r19, 0x03	; 3
     c4a:	c3 2e       	mov	r12, r19
     c4c:	45 e8       	ldi	r20, 0x85	; 133
     c4e:	64 2e       	mov	r6, r20
     c50:	56 e8       	ldi	r21, 0x86	; 134
     c52:	75 2e       	mov	r7, r21
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	36 2e       	mov	r3, r22
     c58:	78 e0       	ldi	r23, 0x08	; 8
     c5a:	47 2e       	mov	r4, r23
     c5c:	ea 81       	ldd	r30, Y+2	; 0x02
     c5e:	fb 81       	ldd	r31, Y+3	; 0x03
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	88 16       	cp	r8, r24
     c66:	99 06       	cpc	r9, r25
     c68:	08 f0       	brcs	.+2      	; 0xc6c <qtm_key_sensors_process+0x60>
     c6a:	a6 c1       	rjmp	.+844    	; 0xfb8 <qtm_key_sensors_process+0x3ac>
     c6c:	75 01       	movw	r14, r10
     c6e:	ee 0c       	add	r14, r14
     c70:	ff 1c       	adc	r15, r15
     c72:	ec 81       	ldd	r30, Y+4	; 0x04
     c74:	fd 81       	ldd	r31, Y+5	; 0x05
     c76:	ee 0d       	add	r30, r14
     c78:	ff 1d       	adc	r31, r15
     c7a:	a2 81       	ldd	r26, Z+2	; 0x02
     c7c:	b3 81       	ldd	r27, Z+3	; 0x03
     c7e:	9c 91       	ld	r25, X
     c80:	9e 71       	andi	r25, 0x1E	; 30
     c82:	09 f0       	breq	.+2      	; 0xc86 <qtm_key_sensors_process+0x7a>
     c84:	50 82       	st	Z, r5
     c86:	0c 81       	ldd	r16, Y+4	; 0x04
     c88:	1d 81       	ldd	r17, Y+5	; 0x05
     c8a:	0e 0d       	add	r16, r14
     c8c:	1f 1d       	adc	r17, r15
     c8e:	d8 01       	movw	r26, r16
     c90:	8c 91       	ld	r24, X
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	09 f4       	brne	.+2      	; 0xc98 <qtm_key_sensors_process+0x8c>
     c96:	9e c0       	rjmp	.+316    	; 0xdd4 <qtm_key_sensors_process+0x1c8>
     c98:	38 f4       	brcc	.+14     	; 0xca8 <qtm_key_sensors_process+0x9c>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	d1 f0       	breq	.+52     	; 0xcd2 <qtm_key_sensors_process+0xc6>
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <qtm_key_sensors_process+0x96>
     ca0:	45 c0       	rjmp	.+138    	; 0xd2c <qtm_key_sensors_process+0x120>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	59 f0       	breq	.+22     	; 0xcbc <qtm_key_sensors_process+0xb0>
     ca6:	81 c1       	rjmp	.+770    	; 0xfaa <qtm_key_sensors_process+0x39e>
     ca8:	85 38       	cpi	r24, 0x85	; 133
     caa:	09 f4       	brne	.+2      	; 0xcae <qtm_key_sensors_process+0xa2>
     cac:	bf c0       	rjmp	.+382    	; 0xe2c <qtm_key_sensors_process+0x220>
     cae:	86 38       	cpi	r24, 0x86	; 134
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <qtm_key_sensors_process+0xa8>
     cb2:	f5 c0       	rjmp	.+490    	; 0xe9e <qtm_key_sensors_process+0x292>
     cb4:	87 30       	cpi	r24, 0x07	; 7
     cb6:	09 f0       	breq	.+2      	; 0xcba <qtm_key_sensors_process+0xae>
     cb8:	78 c1       	rjmp	.+752    	; 0xfaa <qtm_key_sensors_process+0x39e>
     cba:	36 c1       	rjmp	.+620    	; 0xf28 <qtm_key_sensors_process+0x31c>
     cbc:	91 11       	cpse	r25, r1
     cbe:	67 c1       	rjmp	.+718    	; 0xf8e <qtm_key_sensors_process+0x382>
     cc0:	f8 01       	movw	r30, r16
     cc2:	30 82       	st	Z, r3
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	fc 01       	movw	r30, r24
     cca:	ee 0d       	add	r30, r14
     ccc:	ff 1d       	adc	r31, r15
     cce:	41 82       	std	Z+1, r4	; 0x01
     cd0:	5e c1       	rjmp	.+700    	; 0xf8e <qtm_key_sensors_process+0x382>
     cd2:	d8 01       	movw	r26, r16
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	2c 91       	ld	r18, X
     cd8:	11 97       	sbiw	r26, 0x01	; 1
     cda:	22 23       	and	r18, r18
     cdc:	29 f1       	breq	.+74     	; 0xd28 <qtm_key_sensors_process+0x11c>
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	25 30       	cpi	r18, 0x05	; 5
     ce8:	18 f0       	brcs	.+6      	; 0xcf0 <qtm_key_sensors_process+0xe4>
     cea:	81 81       	ldd	r24, Z+1	; 0x01
     cec:	92 81       	ldd	r25, Z+2	; 0x02
     cee:	0e c0       	rjmp	.+28     	; 0xd0c <qtm_key_sensors_process+0x100>
     cf0:	d8 01       	movw	r26, r16
     cf2:	14 96       	adiw	r26, 0x04	; 4
     cf4:	8d 91       	ld	r24, X+
     cf6:	9c 91       	ld	r25, X
     cf8:	15 97       	sbiw	r26, 0x05	; 5
     cfa:	41 81       	ldd	r20, Z+1	; 0x01
     cfc:	52 81       	ldd	r21, Z+2	; 0x02
     cfe:	84 17       	cp	r24, r20
     d00:	95 07       	cpc	r25, r21
     d02:	69 f0       	breq	.+26     	; 0xd1e <qtm_key_sensors_process+0x112>
     d04:	48 17       	cp	r20, r24
     d06:	59 07       	cpc	r21, r25
     d08:	30 f4       	brcc	.+12     	; 0xd16 <qtm_key_sensors_process+0x10a>
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	15 96       	adiw	r26, 0x05	; 5
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
     d12:	14 97       	sbiw	r26, 0x04	; 4
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <qtm_key_sensors_process+0x112>
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	f8 01       	movw	r30, r16
     d1a:	95 83       	std	Z+5, r25	; 0x05
     d1c:	84 83       	std	Z+4, r24	; 0x04
     d1e:	21 50       	subi	r18, 0x01	; 1
     d20:	d8 01       	movw	r26, r16
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	2c 93       	st	X, r18
     d26:	33 c1       	rjmp	.+614    	; 0xf8e <qtm_key_sensors_process+0x382>
     d28:	f8 01       	movw	r30, r16
     d2a:	2d c1       	rjmp	.+602    	; 0xf86 <qtm_key_sensors_process+0x37a>
     d2c:	d8 01       	movw	r26, r16
     d2e:	14 96       	adiw	r26, 0x04	; 4
     d30:	2d 91       	ld	r18, X+
     d32:	3c 91       	ld	r19, X
     d34:	15 97       	sbiw	r26, 0x05	; 5
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	ed 91       	ld	r30, X+
     d3a:	fc 91       	ld	r31, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	41 81       	ldd	r20, Z+1	; 0x01
     d40:	52 81       	ldd	r21, Z+2	; 0x02
     d42:	24 17       	cp	r18, r20
     d44:	35 07       	cpc	r19, r21
     d46:	09 f4       	brne	.+2      	; 0xd4a <qtm_key_sensors_process+0x13e>
     d48:	30 c1       	rjmp	.+608    	; 0xfaa <qtm_key_sensors_process+0x39e>
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	9f 81       	ldd	r25, Y+7	; 0x07
     d4e:	42 17       	cp	r20, r18
     d50:	53 07       	cpc	r21, r19
     d52:	f8 f4       	brcc	.+62     	; 0xd92 <qtm_key_sensors_process+0x186>
     d54:	ea 81       	ldd	r30, Y+2	; 0x02
     d56:	fb 81       	ldd	r31, Y+3	; 0x03
     d58:	24 1b       	sub	r18, r20
     d5a:	35 0b       	sbc	r19, r21
     d5c:	dc 01       	movw	r26, r24
     d5e:	aa 0d       	add	r26, r10
     d60:	bb 1d       	adc	r27, r11
     d62:	8c 91       	ld	r24, X
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	05 80       	ldd	r0, Z+5	; 0x05
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <qtm_key_sensors_process+0x162>
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <qtm_key_sensors_process+0x15e>
     d72:	99 27       	eor	r25, r25
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	08 f4       	brcc	.+2      	; 0xd7c <qtm_key_sensors_process+0x170>
     d7a:	17 c1       	rjmp	.+558    	; 0xfaa <qtm_key_sensors_process+0x39e>
     d7c:	84 81       	ldd	r24, Z+4	; 0x04
     d7e:	88 23       	and	r24, r24
     d80:	09 f4       	brne	.+2      	; 0xd84 <qtm_key_sensors_process+0x178>
     d82:	13 c1       	rjmp	.+550    	; 0xfaa <qtm_key_sensors_process+0x39e>
     d84:	87 e0       	ldi	r24, 0x07	; 7
     d86:	f8 01       	movw	r30, r16
     d88:	80 83       	st	Z, r24
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	24 81       	ldd	r18, Z+4	; 0x04
     d90:	1a c0       	rjmp	.+52     	; 0xdc6 <qtm_key_sensors_process+0x1ba>
     d92:	fc 01       	movw	r30, r24
     d94:	ea 0d       	add	r30, r10
     d96:	fb 1d       	adc	r31, r11
     d98:	42 1b       	sub	r20, r18
     d9a:	53 0b       	sbc	r21, r19
     d9c:	80 81       	ld	r24, Z
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	48 17       	cp	r20, r24
     da2:	59 07       	cpc	r21, r25
     da4:	08 f4       	brcc	.+2      	; 0xda8 <qtm_key_sensors_process+0x19c>
     da6:	01 c1       	rjmp	.+514    	; 0xfaa <qtm_key_sensors_process+0x39e>
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	88 23       	and	r24, r24
     dac:	31 f0       	breq	.+12     	; 0xdba <qtm_key_sensors_process+0x1ae>
     dae:	b4 01       	movw	r22, r8
     db0:	ce 01       	movw	r24, r28
     db2:	0e 94 73 05 	call	0xae6	; 0xae6 <check_for_aks_block>
     db6:	81 11       	cpse	r24, r1
     db8:	f8 c0       	rjmp	.+496    	; 0xfaa <qtm_key_sensors_process+0x39e>
     dba:	e4 e0       	ldi	r30, 0x04	; 4
     dbc:	d8 01       	movw	r26, r16
     dbe:	ec 93       	st	X, r30
     dc0:	ea 81       	ldd	r30, Y+2	; 0x02
     dc2:	fb 81       	ldd	r31, Y+3	; 0x03
     dc4:	22 81       	ldd	r18, Z+2	; 0x02
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	fc 01       	movw	r30, r24
     dcc:	ee 0d       	add	r30, r14
     dce:	ff 1d       	adc	r31, r15
     dd0:	21 83       	std	Z+1, r18	; 0x01
     dd2:	dd c0       	rjmp	.+442    	; 0xf8e <qtm_key_sensors_process+0x382>
     dd4:	d8 01       	movw	r26, r16
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	2d 91       	ld	r18, X+
     dda:	3c 91       	ld	r19, X
     ddc:	15 97       	sbiw	r26, 0x05	; 5
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	13 97       	sbiw	r26, 0x03	; 3
     de6:	81 81       	ldd	r24, Z+1	; 0x01
     de8:	92 81       	ldd	r25, Z+2	; 0x02
     dea:	82 17       	cp	r24, r18
     dec:	93 07       	cpc	r25, r19
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <qtm_key_sensors_process+0x1e6>
     df0:	bb c0       	rjmp	.+374    	; 0xf68 <qtm_key_sensors_process+0x35c>
     df2:	ee 81       	ldd	r30, Y+6	; 0x06
     df4:	ff 81       	ldd	r31, Y+7	; 0x07
     df6:	ea 0d       	add	r30, r10
     df8:	fb 1d       	adc	r31, r11
     dfa:	82 1b       	sub	r24, r18
     dfc:	93 0b       	sbc	r25, r19
     dfe:	20 81       	ld	r18, Z
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	28 17       	cp	r18, r24
     e04:	39 07       	cpc	r19, r25
     e06:	08 f0       	brcs	.+2      	; 0xe0a <qtm_key_sensors_process+0x1fe>
     e08:	c5 c0       	rjmp	.+394    	; 0xf94 <qtm_key_sensors_process+0x388>
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	88 23       	and	r24, r24
     e0e:	31 f0       	breq	.+12     	; 0xe1c <qtm_key_sensors_process+0x210>
     e10:	b4 01       	movw	r22, r8
     e12:	ce 01       	movw	r24, r28
     e14:	0e 94 73 05 	call	0xae6	; 0xae6 <check_for_aks_block>
     e18:	81 11       	cpse	r24, r1
     e1a:	c7 c0       	rjmp	.+398    	; 0xfaa <qtm_key_sensors_process+0x39e>
     e1c:	f8 01       	movw	r30, r16
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <qtm_key_sensors_process+0x21a>
     e24:	6a c0       	rjmp	.+212    	; 0xefa <qtm_key_sensors_process+0x2ee>
     e26:	81 50       	subi	r24, 0x01	; 1
     e28:	81 83       	std	Z+1, r24	; 0x01
     e2a:	b1 c0       	rjmp	.+354    	; 0xf8e <qtm_key_sensors_process+0x382>
     e2c:	e8 81       	ld	r30, Y
     e2e:	f9 81       	ldd	r31, Y+1	; 0x01
     e30:	aa 81       	ldd	r26, Y+2	; 0x02
     e32:	bb 81       	ldd	r27, Y+3	; 0x03
     e34:	18 96       	adiw	r26, 0x08	; 8
     e36:	8c 91       	ld	r24, X
     e38:	83 83       	std	Z+3, r24	; 0x03
     e3a:	ec 81       	ldd	r30, Y+4	; 0x04
     e3c:	fd 81       	ldd	r31, Y+5	; 0x05
     e3e:	ee 0d       	add	r30, r14
     e40:	ff 1d       	adc	r31, r15
     e42:	44 81       	ldd	r20, Z+4	; 0x04
     e44:	55 81       	ldd	r21, Z+5	; 0x05
     e46:	a2 81       	ldd	r26, Z+2	; 0x02
     e48:	b3 81       	ldd	r27, Z+3	; 0x03
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	8d 91       	ld	r24, X+
     e4e:	9c 91       	ld	r25, X
     e50:	12 97       	sbiw	r26, 0x02	; 2
     e52:	84 17       	cp	r24, r20
     e54:	95 07       	cpc	r25, r21
     e56:	c0 f0       	brcs	.+48     	; 0xe88 <qtm_key_sensors_process+0x27c>
     e58:	ae 81       	ldd	r26, Y+6	; 0x06
     e5a:	bf 81       	ldd	r27, Y+7	; 0x07
     e5c:	aa 0d       	add	r26, r10
     e5e:	bb 1d       	adc	r27, r11
     e60:	6c 91       	ld	r22, X
     e62:	26 2f       	mov	r18, r22
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	7c 91       	ld	r23, X
     e6a:	7f 5f       	subi	r23, 0xFF	; 255
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <qtm_key_sensors_process+0x266>
     e6e:	35 95       	asr	r19
     e70:	27 95       	ror	r18
     e72:	7a 95       	dec	r23
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <qtm_key_sensors_process+0x262>
     e76:	84 1b       	sub	r24, r20
     e78:	95 0b       	sbc	r25, r21
     e7a:	62 1b       	sub	r22, r18
     e7c:	26 2f       	mov	r18, r22
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	28 17       	cp	r18, r24
     e82:	39 07       	cpc	r19, r25
     e84:	08 f4       	brcc	.+2      	; 0xe88 <qtm_key_sensors_process+0x27c>
     e86:	8f c0       	rjmp	.+286    	; 0xfa6 <qtm_key_sensors_process+0x39a>
     e88:	70 82       	st	Z, r7
     e8a:	ea 81       	ldd	r30, Y+2	; 0x02
     e8c:	fb 81       	ldd	r31, Y+3	; 0x03
     e8e:	22 81       	ldd	r18, Z+2	; 0x02
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	fc 01       	movw	r30, r24
     e96:	ee 0d       	add	r30, r14
     e98:	ff 1d       	adc	r31, r15
     e9a:	21 83       	std	Z+1, r18	; 0x01
     e9c:	42 c0       	rjmp	.+132    	; 0xf22 <qtm_key_sensors_process+0x316>
     e9e:	d8 01       	movw	r26, r16
     ea0:	14 96       	adiw	r26, 0x04	; 4
     ea2:	6d 91       	ld	r22, X+
     ea4:	7c 91       	ld	r23, X
     ea6:	15 97       	sbiw	r26, 0x05	; 5
     ea8:	12 96       	adiw	r26, 0x02	; 2
     eaa:	ed 91       	ld	r30, X+
     eac:	fc 91       	ld	r31, X
     eae:	13 97       	sbiw	r26, 0x03	; 3
     eb0:	21 81       	ldd	r18, Z+1	; 0x01
     eb2:	32 81       	ldd	r19, Z+2	; 0x02
     eb4:	26 17       	cp	r18, r22
     eb6:	37 07       	cpc	r19, r23
     eb8:	58 f4       	brcc	.+22     	; 0xed0 <qtm_key_sensors_process+0x2c4>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	8c 91       	ld	r24, X
     ebe:	11 97       	sbiw	r26, 0x01	; 1
     ec0:	81 11       	cpse	r24, r1
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <qtm_key_sensors_process+0x2bc>
     ec4:	cc 92       	st	X, r12
     ec6:	6f c0       	rjmp	.+222    	; 0xfa6 <qtm_key_sensors_process+0x39a>
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	f8 01       	movw	r30, r16
     ecc:	81 83       	std	Z+1, r24	; 0x01
     ece:	6b c0       	rjmp	.+214    	; 0xfa6 <qtm_key_sensors_process+0x39a>
     ed0:	ee 81       	ldd	r30, Y+6	; 0x06
     ed2:	ff 81       	ldd	r31, Y+7	; 0x07
     ed4:	ea 0d       	add	r30, r10
     ed6:	fb 1d       	adc	r31, r11
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	9f 5f       	subi	r25, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <qtm_key_sensors_process+0x2dc>
     ee4:	55 95       	asr	r21
     ee6:	47 95       	ror	r20
     ee8:	9a 95       	dec	r25
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <qtm_key_sensors_process+0x2d8>
     eec:	26 1b       	sub	r18, r22
     eee:	37 0b       	sbc	r19, r23
     ef0:	84 1b       	sub	r24, r20
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	60 f4       	brcc	.+24     	; 0xf12 <qtm_key_sensors_process+0x306>
     efa:	d8 01       	movw	r26, r16
     efc:	6c 92       	st	X, r6
     efe:	ea 81       	ldd	r30, Y+2	; 0x02
     f00:	fb 81       	ldd	r31, Y+3	; 0x03
     f02:	23 81       	ldd	r18, Z+3	; 0x03
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	fc 01       	movw	r30, r24
     f0a:	ee 0d       	add	r30, r14
     f0c:	ff 1d       	adc	r31, r15
     f0e:	21 83       	std	Z+1, r18	; 0x01
     f10:	4a c0       	rjmp	.+148    	; 0xfa6 <qtm_key_sensors_process+0x39a>
     f12:	f8 01       	movw	r30, r16
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	81 11       	cpse	r24, r1
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <qtm_key_sensors_process+0x312>
     f1a:	c0 82       	st	Z, r12
     f1c:	44 c0       	rjmp	.+136    	; 0xfa6 <qtm_key_sensors_process+0x39a>
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	81 83       	std	Z+1, r24	; 0x01
     f22:	22 24       	eor	r2, r2
     f24:	23 94       	inc	r2
     f26:	33 c0       	rjmp	.+102    	; 0xf8e <qtm_key_sensors_process+0x382>
     f28:	f8 01       	movw	r30, r16
     f2a:	24 81       	ldd	r18, Z+4	; 0x04
     f2c:	35 81       	ldd	r19, Z+5	; 0x05
     f2e:	02 80       	ldd	r0, Z+2	; 0x02
     f30:	f3 81       	ldd	r31, Z+3	; 0x03
     f32:	e0 2d       	mov	r30, r0
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	92 81       	ldd	r25, Z+2	; 0x02
     f38:	82 17       	cp	r24, r18
     f3a:	93 07       	cpc	r25, r19
     f3c:	58 f5       	brcc	.+86     	; 0xf94 <qtm_key_sensors_process+0x388>
     f3e:	28 1b       	sub	r18, r24
     f40:	39 0b       	sbc	r19, r25
     f42:	ee 81       	ldd	r30, Y+6	; 0x06
     f44:	ff 81       	ldd	r31, Y+7	; 0x07
     f46:	ea 0d       	add	r30, r10
     f48:	fb 1d       	adc	r31, r11
     f4a:	80 81       	ld	r24, Z
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	ea 81       	ldd	r30, Y+2	; 0x02
     f50:	fb 81       	ldd	r31, Y+3	; 0x03
     f52:	05 80       	ldd	r0, Z+5	; 0x05
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <qtm_key_sensors_process+0x34e>
     f56:	95 95       	asr	r25
     f58:	87 95       	ror	r24
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <qtm_key_sensors_process+0x34a>
     f5e:	99 27       	eor	r25, r25
     f60:	28 17       	cp	r18, r24
     f62:	39 07       	cpc	r19, r25
     f64:	18 f4       	brcc	.+6      	; 0xf6c <qtm_key_sensors_process+0x360>
     f66:	d8 01       	movw	r26, r16
     f68:	cc 92       	st	X, r12
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <qtm_key_sensors_process+0x38c>
     f6c:	f8 01       	movw	r30, r16
     f6e:	81 81       	ldd	r24, Z+1	; 0x01
     f70:	81 11       	cpse	r24, r1
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <qtm_key_sensors_process+0x37e>
     f74:	50 82       	st	Z, r5
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	fc 01       	movw	r30, r24
     f7c:	ee 0d       	add	r30, r14
     f7e:	ff 1d       	adc	r31, r15
     f80:	02 80       	ldd	r0, Z+2	; 0x02
     f82:	f3 81       	ldd	r31, Z+3	; 0x03
     f84:	e0 2d       	mov	r30, r0
     f86:	c0 82       	st	Z, r12
     f88:	10 c0       	rjmp	.+32     	; 0xfaa <qtm_key_sensors_process+0x39e>
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	81 83       	std	Z+1, r24	; 0x01
     f8e:	dd 24       	eor	r13, r13
     f90:	d3 94       	inc	r13
     f92:	0b c0       	rjmp	.+22     	; 0xfaa <qtm_key_sensors_process+0x39e>
     f94:	f8 01       	movw	r30, r16
     f96:	c0 82       	st	Z, r12
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	fc 01       	movw	r30, r24
     f9e:	ee 0d       	add	r30, r14
     fa0:	ff 1d       	adc	r31, r15
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <qtm_key_sensors_process+0x39e>
     fa6:	22 24       	eor	r2, r2
     fa8:	23 94       	inc	r2
     faa:	ff ef       	ldi	r31, 0xFF	; 255
     fac:	8f 1a       	sub	r8, r31
     fae:	9f 0a       	sbc	r9, r31
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	a8 0e       	add	r10, r24
     fb4:	b1 1c       	adc	r11, r1
     fb6:	52 ce       	rjmp	.-860    	; 0xc5c <qtm_key_sensors_process+0x50>
     fb8:	e8 81       	ld	r30, Y
     fba:	f9 81       	ldd	r31, Y+1	; 0x01
     fbc:	80 81       	ld	r24, Z
     fbe:	87 ff       	sbrs	r24, 7
     fc0:	23 c0       	rjmp	.+70     	; 0x1008 <qtm_key_sensors_process+0x3fc>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	98 f4       	brcc	.+38     	; 0xffe <qtm_key_sensors_process+0x3f2>
     fd8:	ec 81       	ldd	r30, Y+4	; 0x04
     fda:	fd 81       	ldd	r31, Y+5	; 0x05
     fdc:	e4 0f       	add	r30, r20
     fde:	f5 1f       	adc	r31, r21
     fe0:	a2 81       	ldd	r26, Z+2	; 0x02
     fe2:	b3 81       	ldd	r27, Z+3	; 0x03
     fe4:	8c 91       	ld	r24, X
     fe6:	80 fd       	sbrc	r24, 0
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <qtm_key_sensors_process+0x3e8>
     fea:	90 81       	ld	r25, Z
     fec:	97 7f       	andi	r25, 0xF7	; 247
     fee:	11 f0       	breq	.+4      	; 0xff4 <qtm_key_sensors_process+0x3e8>
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	8c 93       	st	X, r24
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	4a 5f       	subi	r20, 0xFA	; 250
     ffa:	5f 4f       	sbci	r21, 0xFF	; 255
     ffc:	e6 cf       	rjmp	.-52     	; 0xfca <qtm_key_sensors_process+0x3be>
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	80 81       	ld	r24, Z
    1004:	8f 77       	andi	r24, 0x7F	; 127
    1006:	80 83       	st	Z, r24
    1008:	d1 10       	cpse	r13, r1
    100a:	07 c0       	rjmp	.+14     	; 0x101a <qtm_key_sensors_process+0x40e>
    100c:	e8 81       	ld	r30, Y
    100e:	f9 81       	ldd	r31, Y+1	; 0x01
    1010:	21 10       	cpse	r2, r1
    1012:	6f c0       	rjmp	.+222    	; 0x10f2 <qtm_key_sensors_process+0x4e6>
    1014:	80 81       	ld	r24, Z
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	6e c0       	rjmp	.+220    	; 0x10f6 <qtm_key_sensors_process+0x4ea>
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	81 85       	ldd	r24, Z+9	; 0x09
    1020:	88 23       	and	r24, r24
    1022:	a1 f3       	breq	.-24     	; 0x100c <qtm_key_sensors_process+0x400>
    1024:	e8 81       	ld	r30, Y
    1026:	f9 81       	ldd	r31, Y+1	; 0x01
    1028:	80 81       	ld	r24, Z
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	80 83       	st	Z, r24
    102e:	ea 81       	ldd	r30, Y+2	; 0x02
    1030:	fb 81       	ldd	r31, Y+3	; 0x03
    1032:	81 85       	ldd	r24, Z+9	; 0x09
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	51 f7       	brne	.-44     	; 0x100c <qtm_key_sensors_process+0x400>
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	96 e0       	ldi	r25, 0x06	; 6
    1042:	d9 2e       	mov	r13, r25
    1044:	ea 81       	ldd	r30, Y+2	; 0x02
    1046:	fb 81       	ldd	r31, Y+3	; 0x03
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	26 17       	cp	r18, r22
    104e:	37 07       	cpc	r19, r23
    1050:	e8 f6       	brcc	.-70     	; 0x100c <qtm_key_sensors_process+0x400>
    1052:	0c 81       	ldd	r16, Y+4	; 0x04
    1054:	1d 81       	ldd	r17, Y+5	; 0x05
    1056:	fa 01       	movw	r30, r20
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e0 0f       	add	r30, r16
    105e:	f1 1f       	adc	r31, r17
    1060:	80 81       	ld	r24, Z
    1062:	98 2f       	mov	r25, r24
    1064:	97 7f       	andi	r25, 0xF7	; 247
    1066:	a1 f1       	breq	.+104    	; 0x10d0 <qtm_key_sensors_process+0x4c4>
    1068:	85 38       	cpi	r24, 0x85	; 133
    106a:	11 f0       	breq	.+4      	; 0x1070 <qtm_key_sensors_process+0x464>
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	b1 f5       	brne	.+108    	; 0x10dc <qtm_key_sensors_process+0x4d0>
    1070:	ee 80       	ldd	r14, Y+6	; 0x06
    1072:	ff 80       	ldd	r15, Y+7	; 0x07
    1074:	d7 01       	movw	r26, r14
    1076:	a4 0f       	add	r26, r20
    1078:	b5 1f       	adc	r27, r21
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	bc 90       	ld	r11, X
    107e:	bb 20       	and	r11, r11
    1080:	39 f1       	breq	.+78     	; 0x10d0 <qtm_key_sensors_process+0x4c4>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	c1 2c       	mov	r12, r1
    1088:	86 17       	cp	r24, r22
    108a:	97 07       	cpc	r25, r23
    108c:	f8 f4       	brcc	.+62     	; 0x10cc <qtm_key_sensors_process+0x4c0>
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	d1 f0       	breq	.+52     	; 0x10c8 <qtm_key_sensors_process+0x4bc>
    1094:	d8 9e       	mul	r13, r24
    1096:	d0 01       	movw	r26, r0
    1098:	d9 9e       	mul	r13, r25
    109a:	b0 0d       	add	r27, r0
    109c:	11 24       	eor	r1, r1
    109e:	a0 0f       	add	r26, r16
    10a0:	b1 1f       	adc	r27, r17
    10a2:	ac 91       	ld	r26, X
    10a4:	a4 30       	cpi	r26, 0x04	; 4
    10a6:	11 f0       	breq	.+4      	; 0x10ac <qtm_key_sensors_process+0x4a0>
    10a8:	a6 38       	cpi	r26, 0x86	; 134
    10aa:	71 f4       	brne	.+28     	; 0x10c8 <qtm_key_sensors_process+0x4bc>
    10ac:	dc 01       	movw	r26, r24
    10ae:	aa 0f       	add	r26, r26
    10b0:	bb 1f       	adc	r27, r27
    10b2:	a8 0f       	add	r26, r24
    10b4:	b9 1f       	adc	r27, r25
    10b6:	ae 0d       	add	r26, r14
    10b8:	bf 1d       	adc	r27, r15
    10ba:	12 96       	adiw	r26, 0x02	; 2
    10bc:	ac 91       	ld	r26, X
    10be:	ba 12       	cpse	r11, r26
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <qtm_key_sensors_process+0x4bc>
    10c2:	cb 01       	movw	r24, r22
    10c4:	cc 24       	eor	r12, r12
    10c6:	c3 94       	inc	r12
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	de cf       	rjmp	.-68     	; 0x1088 <qtm_key_sensors_process+0x47c>
    10cc:	c1 10       	cpse	r12, r1
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <qtm_key_sensors_process+0x4d0>
    10d0:	02 80       	ldd	r0, Z+2	; 0x02
    10d2:	f3 81       	ldd	r31, Z+3	; 0x03
    10d4:	e0 2d       	mov	r30, r0
    10d6:	80 81       	ld	r24, Z
    10d8:	8e 7f       	andi	r24, 0xFE	; 254
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <qtm_key_sensors_process+0x4da>
    10dc:	02 80       	ldd	r0, Z+2	; 0x02
    10de:	f3 81       	ldd	r31, Z+3	; 0x03
    10e0:	e0 2d       	mov	r30, r0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	80 83       	st	Z, r24
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	4d 5f       	subi	r20, 0xFD	; 253
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	a9 cf       	rjmp	.-174    	; 0x1044 <qtm_key_sensors_process+0x438>
    10f2:	80 81       	ld	r24, Z
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 83       	st	Z, r24
    10f8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <qtm_local_ms_timecount>
    10fc:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <qtm_local_ms_timecount+0x1>
    1100:	e8 81       	ld	r30, Y
    1102:	f9 81       	ldd	r31, Y+1	; 0x01
    1104:	21 81       	ldd	r18, Z+1	; 0x01
    1106:	32 81       	ldd	r19, Z+2	; 0x02
    1108:	a9 01       	movw	r20, r18
    110a:	48 53       	subi	r20, 0x38	; 56
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	48 17       	cp	r20, r24
    1110:	59 07       	cpc	r21, r25
    1112:	38 f4       	brcc	.+14     	; 0x1122 <qtm_key_sensors_process+0x516>
    1114:	82 1b       	sub	r24, r18
    1116:	93 0b       	sbc	r25, r19
    1118:	aa 24       	eor	r10, r10
    111a:	a3 94       	inc	r10
    111c:	a3 e0       	ldi	r26, 0x03	; 3
    111e:	ba 2e       	mov	r11, r26
    1120:	44 c0       	rjmp	.+136    	; 0x11aa <qtm_key_sensors_process+0x59e>
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	10 f0       	brcs	.+4      	; 0x112c <qtm_key_sensors_process+0x520>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	04 c1       	rjmp	.+520    	; 0x1334 <qtm_key_sensors_process+0x728>
    112c:	82 1b       	sub	r24, r18
    112e:	93 0b       	sbc	r25, r19
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	89 3c       	cpi	r24, 0xC9	; 201
    1134:	91 05       	cpc	r25, r1
    1136:	c0 f3       	brcs	.-16     	; 0x1128 <qtm_key_sensors_process+0x51c>
    1138:	ef cf       	rjmp	.-34     	; 0x1118 <qtm_key_sensors_process+0x50c>
    113a:	88 5c       	subi	r24, 0xC8	; 200
    113c:	91 09       	sbc	r25, r1
    113e:	e8 81       	ld	r30, Y
    1140:	f9 81       	ldd	r31, Y+1	; 0x01
    1142:	21 81       	ldd	r18, Z+1	; 0x01
    1144:	32 81       	ldd	r19, Z+2	; 0x02
    1146:	28 53       	subi	r18, 0x38	; 56
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	32 83       	std	Z+2, r19	; 0x02
    114c:	21 83       	std	Z+1, r18	; 0x01
    114e:	23 81       	ldd	r18, Z+3	; 0x03
    1150:	21 11       	cpse	r18, r1
    1152:	96 c0       	rjmp	.+300    	; 0x1280 <qtm_key_sensors_process+0x674>
    1154:	24 81       	ldd	r18, Z+4	; 0x04
    1156:	22 23       	and	r18, r18
    1158:	11 f0       	breq	.+4      	; 0x115e <qtm_key_sensors_process+0x552>
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	24 83       	std	Z+4, r18	; 0x04
    115e:	e8 81       	ld	r30, Y
    1160:	f9 81       	ldd	r31, Y+1	; 0x01
    1162:	25 81       	ldd	r18, Z+5	; 0x05
    1164:	22 23       	and	r18, r18
    1166:	11 f0       	breq	.+4      	; 0x116c <qtm_key_sensors_process+0x560>
    1168:	21 50       	subi	r18, 0x01	; 1
    116a:	25 83       	std	Z+5, r18	; 0x05
    116c:	8a 80       	ldd	r8, Y+2	; 0x02
    116e:	9b 80       	ldd	r9, Y+3	; 0x03
    1170:	d4 01       	movw	r26, r8
    1172:	16 96       	adiw	r26, 0x06	; 6
    1174:	2c 91       	ld	r18, X
    1176:	16 97       	sbiw	r26, 0x06	; 6
    1178:	21 11       	cpse	r18, r1
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <qtm_key_sensors_process+0x5a6>
    117c:	8a 80       	ldd	r8, Y+2	; 0x02
    117e:	9b 80       	ldd	r9, Y+3	; 0x03
    1180:	f4 01       	movw	r30, r8
    1182:	27 81       	ldd	r18, Z+7	; 0x07
    1184:	21 11       	cpse	r18, r1
    1186:	48 c0       	rjmp	.+144    	; 0x1218 <qtm_key_sensors_process+0x60c>
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	23 81       	ldd	r18, Z+3	; 0x03
    118e:	22 23       	and	r18, r18
    1190:	61 f0       	breq	.+24     	; 0x11aa <qtm_key_sensors_process+0x59e>
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	40 81       	ld	r20, Z
    11a0:	51 81       	ldd	r21, Z+1	; 0x01
    11a2:	a4 17       	cp	r26, r20
    11a4:	b5 07       	cpc	r27, r21
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <qtm_key_sensors_process+0x59e>
    11a8:	6e c0       	rjmp	.+220    	; 0x1286 <qtm_key_sensors_process+0x67a>
    11aa:	89 3c       	cpi	r24, 0xC9	; 201
    11ac:	91 05       	cpc	r25, r1
    11ae:	28 f6       	brcc	.-118    	; 0x113a <qtm_key_sensors_process+0x52e>
    11b0:	bb cf       	rjmp	.-138    	; 0x1128 <qtm_key_sensors_process+0x51c>
    11b2:	08 81       	ld	r16, Y
    11b4:	19 81       	ldd	r17, Y+1	; 0x01
    11b6:	f8 01       	movw	r30, r16
    11b8:	24 81       	ldd	r18, Z+4	; 0x04
    11ba:	21 11       	cpse	r18, r1
    11bc:	df cf       	rjmp	.-66     	; 0x117c <qtm_key_sensors_process+0x570>
    11be:	ed 90       	ld	r14, X+
    11c0:	fc 90       	ld	r15, X
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	4e 15       	cp	r20, r14
    11cc:	5f 05       	cpc	r21, r15
    11ce:	f1 f0       	breq	.+60     	; 0x120c <qtm_key_sensors_process+0x600>
    11d0:	ec 81       	ldd	r30, Y+4	; 0x04
    11d2:	fd 81       	ldd	r31, Y+5	; 0x05
    11d4:	e6 0f       	add	r30, r22
    11d6:	f7 1f       	adc	r31, r23
    11d8:	20 81       	ld	r18, Z
    11da:	23 30       	cpi	r18, 0x03	; 3
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <qtm_key_sensors_process+0x5d6>
    11de:	28 30       	cpi	r18, 0x08	; 8
    11e0:	81 f4       	brne	.+32     	; 0x1202 <qtm_key_sensors_process+0x5f6>
    11e2:	24 81       	ldd	r18, Z+4	; 0x04
    11e4:	35 81       	ldd	r19, Z+5	; 0x05
    11e6:	c2 80       	ldd	r12, Z+2	; 0x02
    11e8:	d3 80       	ldd	r13, Z+3	; 0x03
    11ea:	d6 01       	movw	r26, r12
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	cd 90       	ld	r12, X+
    11f0:	dc 90       	ld	r13, X
    11f2:	12 97       	sbiw	r26, 0x02	; 2
    11f4:	2c 15       	cp	r18, r12
    11f6:	3d 05       	cpc	r19, r13
    11f8:	20 f4       	brcc	.+8      	; 0x1202 <qtm_key_sensors_process+0x5f6>
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	35 83       	std	Z+5, r19	; 0x05
    1200:	24 83       	std	Z+4, r18	; 0x04
    1202:	4f 5f       	subi	r20, 0xFF	; 255
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	6a 5f       	subi	r22, 0xFA	; 250
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	df cf       	rjmp	.-66     	; 0x11ca <qtm_key_sensors_process+0x5be>
    120c:	f4 01       	movw	r30, r8
    120e:	26 81       	ldd	r18, Z+6	; 0x06
    1210:	d8 01       	movw	r26, r16
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	2c 93       	st	X, r18
    1216:	b2 cf       	rjmp	.-156    	; 0x117c <qtm_key_sensors_process+0x570>
    1218:	08 81       	ld	r16, Y
    121a:	19 81       	ldd	r17, Y+1	; 0x01
    121c:	d8 01       	movw	r26, r16
    121e:	15 96       	adiw	r26, 0x05	; 5
    1220:	2c 91       	ld	r18, X
    1222:	21 11       	cpse	r18, r1
    1224:	b1 cf       	rjmp	.-158    	; 0x1188 <qtm_key_sensors_process+0x57c>
    1226:	e0 80       	ld	r14, Z
    1228:	f1 80       	ldd	r15, Z+1	; 0x01
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	4e 15       	cp	r20, r14
    1234:	5f 05       	cpc	r21, r15
    1236:	f1 f0       	breq	.+60     	; 0x1274 <qtm_key_sensors_process+0x668>
    1238:	ec 81       	ldd	r30, Y+4	; 0x04
    123a:	fd 81       	ldd	r31, Y+5	; 0x05
    123c:	e6 0f       	add	r30, r22
    123e:	f7 1f       	adc	r31, r23
    1240:	20 81       	ld	r18, Z
    1242:	23 30       	cpi	r18, 0x03	; 3
    1244:	11 f0       	breq	.+4      	; 0x124a <qtm_key_sensors_process+0x63e>
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	81 f4       	brne	.+32     	; 0x126a <qtm_key_sensors_process+0x65e>
    124a:	24 81       	ldd	r18, Z+4	; 0x04
    124c:	35 81       	ldd	r19, Z+5	; 0x05
    124e:	c2 80       	ldd	r12, Z+2	; 0x02
    1250:	d3 80       	ldd	r13, Z+3	; 0x03
    1252:	d6 01       	movw	r26, r12
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	cd 90       	ld	r12, X+
    1258:	dc 90       	ld	r13, X
    125a:	12 97       	sbiw	r26, 0x02	; 2
    125c:	c2 16       	cp	r12, r18
    125e:	d3 06       	cpc	r13, r19
    1260:	20 f4       	brcc	.+8      	; 0x126a <qtm_key_sensors_process+0x65e>
    1262:	21 50       	subi	r18, 0x01	; 1
    1264:	31 09       	sbc	r19, r1
    1266:	35 83       	std	Z+5, r19	; 0x05
    1268:	24 83       	std	Z+4, r18	; 0x04
    126a:	4f 5f       	subi	r20, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	6a 5f       	subi	r22, 0xFA	; 250
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	df cf       	rjmp	.-66     	; 0x1232 <qtm_key_sensors_process+0x626>
    1274:	f4 01       	movw	r30, r8
    1276:	27 81       	ldd	r18, Z+7	; 0x07
    1278:	d8 01       	movw	r26, r16
    127a:	15 96       	adiw	r26, 0x05	; 5
    127c:	2c 93       	st	X, r18
    127e:	84 cf       	rjmp	.-248    	; 0x1188 <qtm_key_sensors_process+0x57c>
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	23 83       	std	Z+3, r18	; 0x03
    1284:	81 cf       	rjmp	.-254    	; 0x1188 <qtm_key_sensors_process+0x57c>
    1286:	a9 01       	movw	r20, r18
    1288:	44 0f       	add	r20, r20
    128a:	55 1f       	adc	r21, r21
    128c:	ec 81       	ldd	r30, Y+4	; 0x04
    128e:	fd 81       	ldd	r31, Y+5	; 0x05
    1290:	e4 0f       	add	r30, r20
    1292:	f5 1f       	adc	r31, r21
    1294:	60 81       	ld	r22, Z
    1296:	65 38       	cpi	r22, 0x85	; 133
    1298:	09 f0       	breq	.+2      	; 0x129c <qtm_key_sensors_process+0x690>
    129a:	47 c0       	rjmp	.+142    	; 0x132a <qtm_key_sensors_process+0x71e>
    129c:	61 81       	ldd	r22, Z+1	; 0x01
    129e:	66 23       	and	r22, r22
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <qtm_key_sensors_process+0x69c>
    12a2:	61 50       	subi	r22, 0x01	; 1
    12a4:	61 83       	std	Z+1, r22	; 0x01
    12a6:	41 c0       	rjmp	.+130    	; 0x132a <qtm_key_sensors_process+0x71e>
    12a8:	a0 82       	st	Z, r10
    12aa:	6c 81       	ldd	r22, Y+4	; 0x04
    12ac:	7d 81       	ldd	r23, Y+5	; 0x05
    12ae:	fb 01       	movw	r30, r22
    12b0:	e4 0f       	add	r30, r20
    12b2:	f5 1f       	adc	r31, r21
    12b4:	02 80       	ldd	r0, Z+2	; 0x02
    12b6:	f3 81       	ldd	r31, Z+3	; 0x03
    12b8:	e0 2d       	mov	r30, r0
    12ba:	b0 82       	st	Z, r11
    12bc:	ee 81       	ldd	r30, Y+6	; 0x06
    12be:	ff 81       	ldd	r31, Y+7	; 0x07
    12c0:	e2 0f       	add	r30, r18
    12c2:	f3 1f       	adc	r31, r19
    12c4:	d2 80       	ldd	r13, Z+2	; 0x02
    12c6:	dd 20       	and	r13, r13
    12c8:	81 f1       	breq	.+96     	; 0x132a <qtm_key_sensors_process+0x71e>
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	00 e0       	ldi	r16, 0x00	; 0
    12d0:	10 e0       	ldi	r17, 0x00	; 0
    12d2:	ea 81       	ldd	r30, Y+2	; 0x02
    12d4:	fb 81       	ldd	r31, Y+3	; 0x03
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	06 17       	cp	r16, r22
    12dc:	17 07       	cpc	r17, r23
    12de:	28 f5       	brcc	.+74     	; 0x132a <qtm_key_sensors_process+0x71e>
    12e0:	ee 81       	ldd	r30, Y+6	; 0x06
    12e2:	ff 81       	ldd	r31, Y+7	; 0x07
    12e4:	e4 0f       	add	r30, r20
    12e6:	f5 1f       	adc	r31, r21
    12e8:	62 81       	ldd	r22, Z+2	; 0x02
    12ea:	d6 12       	cpse	r13, r22
    12ec:	19 c0       	rjmp	.+50     	; 0x1320 <qtm_key_sensors_process+0x714>
    12ee:	ba 01       	movw	r22, r20
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	ec 81       	ldd	r30, Y+4	; 0x04
    12f6:	fd 81       	ldd	r31, Y+5	; 0x05
    12f8:	4f 01       	movw	r8, r30
    12fa:	86 0e       	add	r8, r22
    12fc:	97 1e       	adc	r9, r23
    12fe:	f4 01       	movw	r30, r8
    1300:	e2 80       	ldd	r14, Z+2	; 0x02
    1302:	f3 80       	ldd	r15, Z+3	; 0x03
    1304:	f7 01       	movw	r30, r14
    1306:	f0 80       	ld	r15, Z
    1308:	f0 fe       	sbrs	r15, 0
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <qtm_key_sensors_process+0x714>
    130c:	f4 01       	movw	r30, r8
    130e:	a0 82       	st	Z, r10
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	e6 0f       	add	r30, r22
    1316:	f7 1f       	adc	r31, r23
    1318:	02 80       	ldd	r0, Z+2	; 0x02
    131a:	f3 81       	ldd	r31, Z+3	; 0x03
    131c:	e0 2d       	mov	r30, r0
    131e:	b0 82       	st	Z, r11
    1320:	0f 5f       	subi	r16, 0xFF	; 255
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	4d 5f       	subi	r20, 0xFD	; 253
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	d4 cf       	rjmp	.-88     	; 0x12d2 <qtm_key_sensors_process+0x6c6>
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	2d 5f       	subi	r18, 0xFD	; 253
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	34 cf       	rjmp	.-408    	; 0x119a <qtm_key_sensors_process+0x58e>
    1332:	8b e0       	ldi	r24, 0x0B	; 11
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	7f 90       	pop	r7
    134e:	6f 90       	pop	r6
    1350:	5f 90       	pop	r5
    1352:	4f 90       	pop	r4
    1354:	3f 90       	pop	r3
    1356:	2f 90       	pop	r2
    1358:	08 95       	ret

0000135a <select_next_channel_to_measure>:
    135a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <current_measure_channel>
    135e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <current_measure_channel+0x1>
    1362:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1366:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	11 97       	sbiw	r26, 0x01	; 1
    1370:	40 81       	ld	r20, Z
    1372:	51 81       	ldd	r21, Z+1	; 0x01
    1374:	25 e0       	ldi	r18, 0x05	; 5
    1376:	28 9f       	mul	r18, r24
    1378:	b0 01       	movw	r22, r0
    137a:	29 9f       	mul	r18, r25
    137c:	70 0d       	add	r23, r0
    137e:	11 24       	eor	r1, r1
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	84 17       	cp	r24, r20
    1386:	95 07       	cpc	r25, r21
    1388:	a8 f4       	brcc	.+42     	; 0x13b4 <select_next_channel_to_measure+0x5a>
    138a:	14 96       	adiw	r26, 0x04	; 4
    138c:	ed 91       	ld	r30, X+
    138e:	fc 91       	ld	r31, X
    1390:	15 97       	sbiw	r26, 0x05	; 5
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	e6 0f       	add	r30, r22
    1398:	f7 1f       	adc	r31, r23
    139a:	e0 81       	ld	r30, Z
    139c:	2b 5f       	subi	r18, 0xFB	; 251
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	e0 fd       	sbrc	r30, 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <select_next_channel_to_measure+0x4e>
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	ee cf       	rjmp	.-36     	; 0x1384 <select_next_channel_to_measure+0x2a>
    13a8:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <current_measure_channel+0x1>
    13ac:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <current_measure_channel>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <current_measure_channel+0x1>
    13b8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <current_measure_channel>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	08 95       	ret

000013c0 <qtm_measure_node>:
    13c0:	4a e0       	ldi	r20, 0x0A	; 10
    13c2:	48 9f       	mul	r20, r24
    13c4:	90 01       	movw	r18, r0
    13c6:	49 9f       	mul	r20, r25
    13c8:	30 0d       	add	r19, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    13d0:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    13d4:	02 80       	ldd	r0, Z+2	; 0x02
    13d6:	f3 81       	ldd	r31, Z+3	; 0x03
    13d8:	e0 2d       	mov	r30, r0
    13da:	e2 0f       	add	r30, r18
    13dc:	f3 1f       	adc	r31, r19
    13de:	42 81       	ldd	r20, Z+2	; 0x02
    13e0:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
    13e4:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    13e8:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    13ec:	02 80       	ldd	r0, Z+2	; 0x02
    13ee:	f3 81       	ldd	r31, Z+3	; 0x03
    13f0:	e0 2d       	mov	r30, r0
    13f2:	e2 0f       	add	r30, r18
    13f4:	f3 1f       	adc	r31, r19
    13f6:	43 81       	ldd	r20, Z+3	; 0x03
    13f8:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
    13fc:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1400:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1404:	02 80       	ldd	r0, Z+2	; 0x02
    1406:	f3 81       	ldd	r31, Z+3	; 0x03
    1408:	e0 2d       	mov	r30, r0
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	44 81       	ldd	r20, Z+4	; 0x04
    1410:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
    1414:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1418:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    141c:	02 80       	ldd	r0, Z+2	; 0x02
    141e:	f3 81       	ldd	r31, Z+3	; 0x03
    1420:	e0 2d       	mov	r30, r0
    1422:	e2 0f       	add	r30, r18
    1424:	f3 1f       	adc	r31, r19
    1426:	42 81       	ldd	r20, Z+2	; 0x02
    1428:	53 81       	ldd	r21, Z+3	; 0x03
    142a:	64 81       	ldd	r22, Z+4	; 0x04
    142c:	75 81       	ldd	r23, Z+5	; 0x05
    142e:	47 2f       	mov	r20, r23
    1430:	55 27       	eor	r21, r21
    1432:	66 27       	eor	r22, r22
    1434:	77 27       	eor	r23, r23
    1436:	40 93 fb 00 	sts	0x00FB, r20	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7f80fb>
    143a:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    143e:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1442:	02 80       	ldd	r0, Z+2	; 0x02
    1444:	f3 81       	ldd	r31, Z+3	; 0x03
    1446:	e0 2d       	mov	r30, r0
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
    144c:	40 81       	ld	r20, Z
    144e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1452:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1456:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    145a:	02 80       	ldd	r0, Z+2	; 0x02
    145c:	f3 81       	ldd	r31, Z+3	; 0x03
    145e:	e0 2d       	mov	r30, r0
    1460:	e2 0f       	add	r30, r18
    1462:	f3 1f       	adc	r31, r19
    1464:	41 81       	ldd	r20, Z+1	; 0x01
    1466:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	68 9f       	mul	r22, r24
    146e:	a0 01       	movw	r20, r0
    1470:	69 9f       	mul	r22, r25
    1472:	50 0d       	add	r21, r0
    1474:	11 24       	eor	r1, r1
    1476:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    147a:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    147e:	04 80       	ldd	r0, Z+4	; 0x04
    1480:	f5 81       	ldd	r31, Z+5	; 0x05
    1482:	e0 2d       	mov	r30, r0
    1484:	e4 0f       	add	r30, r20
    1486:	f5 1f       	adc	r31, r21
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    148e:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1492:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1496:	04 80       	ldd	r0, Z+4	; 0x04
    1498:	f5 81       	ldd	r31, Z+5	; 0x05
    149a:	e0 2d       	mov	r30, r0
    149c:	e4 0f       	add	r30, r20
    149e:	f5 1f       	adc	r31, r21
    14a0:	83 81       	ldd	r24, Z+3	; 0x03
    14a2:	94 81       	ldd	r25, Z+4	; 0x04
    14a4:	88 27       	eor	r24, r24
    14a6:	9f 73       	andi	r25, 0x3F	; 63
    14a8:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
    14ac:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    14b0:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    14b4:	14 96       	adiw	r26, 0x04	; 4
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	15 97       	sbiw	r26, 0x05	; 5
    14bc:	e4 0f       	add	r30, r20
    14be:	f5 1f       	adc	r31, r21
    14c0:	80 81       	ld	r24, Z
    14c2:	81 fd       	sbrc	r24, 1
    14c4:	60 83       	st	Z, r22
    14c6:	14 96       	adiw	r26, 0x04	; 4
    14c8:	8d 91       	ld	r24, X+
    14ca:	9c 91       	ld	r25, X
    14cc:	15 97       	sbiw	r26, 0x05	; 5
    14ce:	fc 01       	movw	r30, r24
    14d0:	e4 0f       	add	r30, r20
    14d2:	f5 1f       	adc	r31, r21
    14d4:	80 81       	ld	r24, Z
    14d6:	8c 71       	andi	r24, 0x1C	; 28
    14d8:	71 f4       	brne	.+28     	; 0x14f6 <qtm_measure_node+0x136>
    14da:	12 96       	adiw	r26, 0x02	; 2
    14dc:	ed 91       	ld	r30, X+
    14de:	fc 91       	ld	r31, X
    14e0:	13 97       	sbiw	r26, 0x03	; 3
    14e2:	e2 0f       	add	r30, r18
    14e4:	f3 1f       	adc	r31, r19
    14e6:	e0 85       	ldd	r30, Z+8	; 0x08
    14e8:	e2 95       	swap	r30
    14ea:	ef 70       	andi	r30, 0x0F	; 15
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e7 52       	subi	r30, 0x27	; 39
    14f0:	fe 4f       	sbci	r31, 0xFE	; 254
    14f2:	80 81       	ld	r24, Z
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <qtm_measure_node+0x138>
    14f6:	8f e3       	ldi	r24, 0x3F	; 63
    14f8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
    14fc:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1500:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1504:	02 80       	ldd	r0, Z+2	; 0x02
    1506:	f3 81       	ldd	r31, Z+3	; 0x03
    1508:	e0 2d       	mov	r30, r0
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	86 81       	ldd	r24, Z+6	; 0x06
    1510:	8b 3f       	cpi	r24, 0xFB	; 251
    1512:	10 f4       	brcc	.+4      	; 0x1518 <qtm_measure_node+0x158>
    1514:	8c 5f       	subi	r24, 0xFC	; 252
    1516:	01 c0       	rjmp	.+2      	; 0x151a <qtm_measure_node+0x15a>
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    151e:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1522:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1526:	02 80       	ldd	r0, Z+2	; 0x02
    1528:	f3 81       	ldd	r31, Z+3	; 0x03
    152a:	e0 2d       	mov	r30, r0
    152c:	e2 0f       	add	r30, r18
    152e:	f3 1f       	adc	r31, r19
    1530:	87 81       	ldd	r24, Z+7	; 0x07
    1532:	80 7f       	andi	r24, 0xF0	; 240
    1534:	91 85       	ldd	r25, Z+9	; 0x09
    1536:	89 2b       	or	r24, r25
    1538:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    153c:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1540:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	fc 01       	movw	r30, r24
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	87 81       	ldd	r24, Z+7	; 0x07
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1556:	82 e1       	ldi	r24, 0x12	; 18
    1558:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    155c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1566:	08 95       	ret

00001568 <qtm_acquisition_process>:
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <touch_seq_lib_state>
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <qtm_acquisition_process+0x2a>
    1590:	31 c1       	rjmp	.+610    	; 0x17f4 <qtm_acquisition_process+0x28c>
    1592:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1596:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    159a:	e0 90 aa 02 	lds	r14, 0x02AA	; 0x8002aa <qtm_raw_data_measurements_ptr>
    159e:	f0 90 ab 02 	lds	r15, 0x02AB	; 0x8002ab <qtm_raw_data_measurements_ptr+0x1>
    15a2:	41 2c       	mov	r4, r1
    15a4:	51 2c       	mov	r5, r1
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	00 e0       	ldi	r16, 0x00	; 0
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	66 24       	eor	r6, r6
    15b2:	63 94       	inc	r6
    15b4:	91 e8       	ldi	r25, 0x81	; 129
    15b6:	79 2e       	mov	r7, r25
    15b8:	aa 24       	eor	r10, r10
    15ba:	aa 94       	dec	r10
    15bc:	bb 24       	eor	r11, r11
    15be:	b3 94       	inc	r11
    15c0:	cd 90       	ld	r12, X+
    15c2:	dc 90       	ld	r13, X
    15c4:	11 97       	sbiw	r26, 0x01	; 1
    15c6:	f6 01       	movw	r30, r12
    15c8:	20 81       	ld	r18, Z
    15ca:	31 81       	ldd	r19, Z+1	; 0x01
    15cc:	02 17       	cp	r16, r18
    15ce:	13 07       	cpc	r17, r19
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <qtm_acquisition_process+0x6c>
    15d2:	0c c1       	rjmp	.+536    	; 0x17ec <qtm_acquisition_process+0x284>
    15d4:	e7 01       	movw	r28, r14
    15d6:	29 91       	ld	r18, Y+
    15d8:	39 91       	ld	r19, Y+
    15da:	7e 01       	movw	r14, r28
    15dc:	14 96       	adiw	r26, 0x04	; 4
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	15 97       	sbiw	r26, 0x05	; 5
    15e4:	e6 0f       	add	r30, r22
    15e6:	f7 1f       	adc	r31, r23
    15e8:	40 81       	ld	r20, Z
    15ea:	4c 71       	andi	r20, 0x1C	; 28
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	56 95       	lsr	r21
    15f0:	47 95       	ror	r20
    15f2:	56 95       	lsr	r21
    15f4:	47 95       	ror	r20
    15f6:	41 15       	cp	r20, r1
    15f8:	51 05       	cpc	r21, r1
    15fa:	21 f0       	breq	.+8      	; 0x1604 <qtm_acquisition_process+0x9c>
    15fc:	41 30       	cpi	r20, 0x01	; 1
    15fe:	51 05       	cpc	r21, r1
    1600:	c1 f0       	breq	.+48     	; 0x1632 <qtm_acquisition_process+0xca>
    1602:	eb c0       	rjmp	.+470    	; 0x17da <qtm_acquisition_process+0x272>
    1604:	12 96       	adiw	r26, 0x02	; 2
    1606:	4d 91       	ld	r20, X+
    1608:	5c 91       	ld	r21, X
    160a:	13 97       	sbiw	r26, 0x03	; 3
    160c:	44 0d       	add	r20, r4
    160e:	55 1d       	adc	r21, r5
    1610:	ea 01       	movw	r28, r20
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	9f 70       	andi	r25, 0x0F	; 15
    1616:	49 85       	ldd	r20, Y+9	; 0x09
    1618:	94 17       	cp	r25, r20
    161a:	10 f4       	brcc	.+4      	; 0x1620 <qtm_acquisition_process+0xb8>
    161c:	49 1b       	sub	r20, r25
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <qtm_acquisition_process+0xba>
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <qtm_acquisition_process+0xc0>
    1624:	36 95       	lsr	r19
    1626:	27 95       	ror	r18
    1628:	4a 95       	dec	r20
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <qtm_acquisition_process+0xbc>
    162c:	32 83       	std	Z+2, r19	; 0x02
    162e:	21 83       	std	Z+1, r18	; 0x01
    1630:	d5 c0       	rjmp	.+426    	; 0x17dc <qtm_acquisition_process+0x274>
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	4d 91       	ld	r20, X+
    1636:	5c 91       	ld	r21, X
    1638:	13 97       	sbiw	r26, 0x03	; 3
    163a:	44 0d       	add	r20, r4
    163c:	55 1d       	adc	r21, r5
    163e:	ea 01       	movw	r28, r20
    1640:	09 84       	ldd	r0, Y+9	; 0x09
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <qtm_acquisition_process+0xe0>
    1644:	36 95       	lsr	r19
    1646:	27 95       	ror	r18
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <qtm_acquisition_process+0xdc>
    164c:	32 83       	std	Z+2, r19	; 0x02
    164e:	21 83       	std	Z+1, r18	; 0x01
    1650:	43 81       	ldd	r20, Z+3	; 0x03
    1652:	54 81       	ldd	r21, Z+4	; 0x04
    1654:	21 15       	cp	r18, r1
    1656:	d2 e0       	ldi	r29, 0x02	; 2
    1658:	3d 07       	cpc	r19, r29
    165a:	20 f0       	brcs	.+8      	; 0x1664 <qtm_acquisition_process+0xfc>
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	31 40       	sbci	r19, 0x01	; 1
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	05 c0       	rjmp	.+10     	; 0x166e <qtm_acquisition_process+0x106>
    1664:	e5 01       	movw	r28, r10
    1666:	c2 1b       	sub	r28, r18
    1668:	d3 0b       	sbc	r29, r19
    166a:	9e 01       	movw	r18, r28
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	e6 01       	movw	r28, r12
    1670:	da 80       	ldd	r13, Y+2	; 0x02
    1672:	d0 e4       	ldi	r29, 0x40	; 64
    1674:	dd 12       	cpse	r13, r29
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <qtm_acquisition_process+0x11a>
    1678:	36 95       	lsr	r19
    167a:	27 95       	ror	r18
    167c:	99 23       	and	r25, r25
    167e:	19 f0       	breq	.+6      	; 0x1686 <qtm_acquisition_process+0x11e>
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <qtm_acquisition_process+0x12c>
    1682:	99 23       	and	r25, r25
    1684:	39 f0       	breq	.+14     	; 0x1694 <qtm_acquisition_process+0x12c>
    1686:	4f 3f       	cpi	r20, 0xFF	; 255
    1688:	9f e3       	ldi	r25, 0x3F	; 63
    168a:	59 07       	cpc	r21, r25
    168c:	31 f4       	brne	.+12     	; 0x169a <qtm_acquisition_process+0x132>
    168e:	70 82       	st	Z, r7
    1690:	8e e0       	ldi	r24, 0x0E	; 14
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <qtm_acquisition_process+0x13a>
    1694:	88 24       	eor	r8, r8
    1696:	83 94       	inc	r8
    1698:	01 c0       	rjmp	.+2      	; 0x169c <qtm_acquisition_process+0x134>
    169a:	81 2c       	mov	r8, r1
    169c:	2a 30       	cpi	r18, 0x0A	; 10
    169e:	31 05       	cpc	r19, r1
    16a0:	98 f4       	brcc	.+38     	; 0x16c8 <qtm_acquisition_process+0x160>
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	15 97       	sbiw	r26, 0x05	; 5
    16aa:	e6 0f       	add	r30, r22
    16ac:	f7 1f       	adc	r31, r23
    16ae:	20 81       	ld	r18, Z
    16b0:	27 ff       	sbrs	r18, 7
    16b2:	60 82       	st	Z, r6
    16b4:	14 96       	adiw	r26, 0x04	; 4
    16b6:	ed 91       	ld	r30, X+
    16b8:	fc 91       	ld	r31, X
    16ba:	15 97       	sbiw	r26, 0x05	; 5
    16bc:	e6 0f       	add	r30, r22
    16be:	f7 1f       	adc	r31, r23
    16c0:	5f 73       	andi	r21, 0x3F	; 63
    16c2:	54 83       	std	Z+4, r21	; 0x04
    16c4:	43 83       	std	Z+3, r20	; 0x03
    16c6:	8a c0       	rjmp	.+276    	; 0x17dc <qtm_acquisition_process+0x274>
    16c8:	6a 01       	movw	r12, r20
    16ca:	cc 24       	eor	r12, r12
    16cc:	c0 e3       	ldi	r28, 0x30	; 48
    16ce:	dc 22       	and	r13, r28
    16d0:	9d 2c       	mov	r9, r13
    16d2:	92 94       	swap	r9
    16d4:	df e0       	ldi	r29, 0x0F	; 15
    16d6:	9d 22       	and	r9, r29
    16d8:	6a 01       	movw	r12, r20
    16da:	cc 24       	eor	r12, r12
    16dc:	df e0       	ldi	r29, 0x0F	; 15
    16de:	dd 22       	and	r13, r29
    16e0:	9d 2d       	mov	r25, r13
    16e2:	6a 01       	movw	r12, r20
    16e4:	c0 ef       	ldi	r28, 0xF0	; 240
    16e6:	cc 22       	and	r12, r28
    16e8:	dd 24       	eor	r13, r13
    16ea:	54 e0       	ldi	r21, 0x04	; 4
    16ec:	d6 94       	lsr	r13
    16ee:	c7 94       	ror	r12
    16f0:	5a 95       	dec	r21
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <qtm_acquisition_process+0x184>
    16f4:	5c 2d       	mov	r21, r12
    16f6:	4f 70       	andi	r20, 0x0F	; 15
    16f8:	81 10       	cpse	r8, r1
    16fa:	32 c0       	rjmp	.+100    	; 0x1760 <qtm_acquisition_process+0x1f8>
    16fc:	20 3d       	cpi	r18, 0xD0	; 208
    16fe:	31 05       	cpc	r19, r1
    1700:	60 f0       	brcs	.+24     	; 0x171a <qtm_acquisition_process+0x1b2>
    1702:	d3 e0       	ldi	r29, 0x03	; 3
    1704:	9d 16       	cp	r9, r29
    1706:	49 f0       	breq	.+18     	; 0x171a <qtm_acquisition_process+0x1b2>
    1708:	93 94       	inc	r9
    170a:	2f 5c       	subi	r18, 0xCF	; 207
    170c:	31 09       	sbc	r19, r1
    170e:	f6 cf       	rjmp	.-20     	; 0x16fc <qtm_acquisition_process+0x194>
    1710:	9f 30       	cpi	r25, 0x0F	; 15
    1712:	41 f0       	breq	.+16     	; 0x1724 <qtm_acquisition_process+0x1bc>
    1714:	9f 5f       	subi	r25, 0xFF	; 255
    1716:	25 51       	subi	r18, 0x15	; 21
    1718:	31 09       	sbc	r19, r1
    171a:	26 31       	cpi	r18, 0x16	; 22
    171c:	31 05       	cpc	r19, r1
    171e:	c0 f7       	brcc	.-16     	; 0x1710 <qtm_acquisition_process+0x1a8>
    1720:	9f 30       	cpi	r25, 0x0F	; 15
    1722:	69 f4       	brne	.+26     	; 0x173e <qtm_acquisition_process+0x1d6>
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	99 12       	cpse	r9, r25
    1728:	02 c0       	rjmp	.+4      	; 0x172e <qtm_acquisition_process+0x1c6>
    172a:	9f e0       	ldi	r25, 0x0F	; 15
    172c:	08 c0       	rjmp	.+16     	; 0x173e <qtm_acquisition_process+0x1d6>
    172e:	93 94       	inc	r9
    1730:	95 e0       	ldi	r25, 0x05	; 5
    1732:	05 c0       	rjmp	.+10     	; 0x173e <qtm_acquisition_process+0x1d6>
    1734:	5f 30       	cpi	r21, 0x0F	; 15
    1736:	49 f0       	breq	.+18     	; 0x174a <qtm_acquisition_process+0x1e2>
    1738:	5f 5f       	subi	r21, 0xFF	; 255
    173a:	22 50       	subi	r18, 0x02	; 2
    173c:	31 09       	sbc	r19, r1
    173e:	23 30       	cpi	r18, 0x03	; 3
    1740:	31 05       	cpc	r19, r1
    1742:	c0 f7       	brcc	.-16     	; 0x1734 <qtm_acquisition_process+0x1cc>
    1744:	5f 30       	cpi	r21, 0x0F	; 15
    1746:	09 f0       	breq	.+2      	; 0x174a <qtm_acquisition_process+0x1e2>
    1748:	5b c0       	rjmp	.+182    	; 0x1800 <qtm_acquisition_process+0x298>
    174a:	9f 30       	cpi	r25, 0x0F	; 15
    174c:	09 f4       	brne	.+2      	; 0x1750 <qtm_acquisition_process+0x1e8>
    174e:	54 c0       	rjmp	.+168    	; 0x17f8 <qtm_acquisition_process+0x290>
    1750:	9f 5f       	subi	r25, 0xFF	; 255
    1752:	55 e0       	ldi	r21, 0x05	; 5
    1754:	55 c0       	rjmp	.+170    	; 0x1800 <qtm_acquisition_process+0x298>
    1756:	99 20       	and	r9, r9
    1758:	61 f0       	breq	.+24     	; 0x1772 <qtm_acquisition_process+0x20a>
    175a:	9a 94       	dec	r9
    175c:	2f 5c       	subi	r18, 0xCF	; 207
    175e:	31 09       	sbc	r19, r1
    1760:	20 3d       	cpi	r18, 0xD0	; 208
    1762:	31 05       	cpc	r19, r1
    1764:	c0 f7       	brcc	.-16     	; 0x1756 <qtm_acquisition_process+0x1ee>
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <qtm_acquisition_process+0x20a>
    1768:	99 23       	and	r25, r25
    176a:	41 f0       	breq	.+16     	; 0x177c <qtm_acquisition_process+0x214>
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	25 51       	subi	r18, 0x15	; 21
    1770:	31 09       	sbc	r19, r1
    1772:	26 31       	cpi	r18, 0x16	; 22
    1774:	31 05       	cpc	r19, r1
    1776:	c0 f7       	brcc	.-16     	; 0x1768 <qtm_acquisition_process+0x200>
    1778:	91 11       	cpse	r25, r1
    177a:	0c c0       	rjmp	.+24     	; 0x1794 <qtm_acquisition_process+0x22c>
    177c:	91 10       	cpse	r9, r1
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <qtm_acquisition_process+0x21c>
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <qtm_acquisition_process+0x22c>
    1784:	9a 94       	dec	r9
    1786:	9a e0       	ldi	r25, 0x0A	; 10
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <qtm_acquisition_process+0x22c>
    178a:	55 23       	and	r21, r21
    178c:	41 f0       	breq	.+16     	; 0x179e <qtm_acquisition_process+0x236>
    178e:	51 50       	subi	r21, 0x01	; 1
    1790:	22 50       	subi	r18, 0x02	; 2
    1792:	31 09       	sbc	r19, r1
    1794:	23 30       	cpi	r18, 0x03	; 3
    1796:	31 05       	cpc	r19, r1
    1798:	c0 f7       	brcc	.-16     	; 0x178a <qtm_acquisition_process+0x222>
    179a:	51 11       	cpse	r21, r1
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <qtm_acquisition_process+0x250>
    179e:	99 23       	and	r25, r25
    17a0:	b9 f1       	breq	.+110    	; 0x1810 <qtm_acquisition_process+0x2a8>
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	5a e0       	ldi	r21, 0x0A	; 10
    17a6:	23 30       	cpi	r18, 0x03	; 3
    17a8:	31 05       	cpc	r19, r1
    17aa:	d0 f6       	brcc	.-76     	; 0x1760 <qtm_acquisition_process+0x1f8>
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <qtm_acquisition_process+0x250>
    17ae:	23 30       	cpi	r18, 0x03	; 3
    17b0:	31 05       	cpc	r19, r1
    17b2:	58 f1       	brcs	.+86     	; 0x180a <qtm_acquisition_process+0x2a2>
    17b4:	4f e0       	ldi	r20, 0x0F	; 15
    17b6:	5f e0       	ldi	r21, 0x0F	; 15
    17b8:	29 2d       	mov	r18, r9
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	32 2f       	mov	r19, r18
    17be:	22 27       	eor	r18, r18
    17c0:	32 95       	swap	r19
    17c2:	30 7f       	andi	r19, 0xF0	; 240
    17c4:	39 2b       	or	r19, r25
    17c6:	24 2b       	or	r18, r20
    17c8:	c0 e1       	ldi	r28, 0x10	; 16
    17ca:	5c 9f       	mul	r21, r28
    17cc:	60 01       	movw	r12, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	c2 2a       	or	r12, r18
    17d2:	d3 2a       	or	r13, r19
    17d4:	d4 82       	std	Z+4, r13	; 0x04
    17d6:	c3 82       	std	Z+3, r12	; 0x03
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <qtm_acquisition_process+0x274>
    17da:	ff cf       	rjmp	.-2      	; 0x17da <qtm_acquisition_process+0x272>
    17dc:	0f 5f       	subi	r16, 0xFF	; 255
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	6b 5f       	subi	r22, 0xFB	; 251
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	da e0       	ldi	r29, 0x0A	; 10
    17e6:	4d 0e       	add	r4, r29
    17e8:	51 1c       	adc	r5, r1
    17ea:	ea ce       	rjmp	.-556    	; 0x15c0 <qtm_acquisition_process+0x58>
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <touch_seq_lib_state>
    17f2:	10 c0       	rjmp	.+32     	; 0x1814 <qtm_acquisition_process+0x2ac>
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <qtm_acquisition_process+0x2ac>
    17f8:	53 e0       	ldi	r21, 0x03	; 3
    17fa:	95 16       	cp	r9, r21
    17fc:	c1 f2       	breq	.-80     	; 0x17ae <qtm_acquisition_process+0x246>
    17fe:	5f e0       	ldi	r21, 0x0F	; 15
    1800:	23 30       	cpi	r18, 0x03	; 3
    1802:	31 05       	cpc	r19, r1
    1804:	08 f0       	brcs	.+2      	; 0x1808 <qtm_acquisition_process+0x2a0>
    1806:	7a cf       	rjmp	.-268    	; 0x16fc <qtm_acquisition_process+0x194>
    1808:	d7 cf       	rjmp	.-82     	; 0x17b8 <qtm_acquisition_process+0x250>
    180a:	5f e0       	ldi	r21, 0x0F	; 15
    180c:	4f e0       	ldi	r20, 0x0F	; 15
    180e:	d4 cf       	rjmp	.-88     	; 0x17b8 <qtm_acquisition_process+0x250>
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	d2 cf       	rjmp	.-92     	; 0x17b8 <qtm_acquisition_process+0x250>
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	bf 90       	pop	r11
    1826:	af 90       	pop	r10
    1828:	9f 90       	pop	r9
    182a:	8f 90       	pop	r8
    182c:	7f 90       	pop	r7
    182e:	6f 90       	pop	r6
    1830:	5f 90       	pop	r5
    1832:	4f 90       	pop	r4
    1834:	08 95       	ret

00001836 <qtm_ptc_init_acquisition_module>:
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	09 f4       	brne	.+2      	; 0x1850 <qtm_ptc_init_acquisition_module+0x1a>
    184e:	76 c0       	rjmp	.+236    	; 0x193c <qtm_ptc_init_acquisition_module+0x106>
    1850:	dc 01       	movw	r26, r24
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	c0 80       	ld	r12, Z
    1858:	d1 80       	ldd	r13, Z+1	; 0x01
    185a:	e1 2c       	mov	r14, r1
    185c:	f1 2c       	mov	r15, r1
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	ba 01       	movw	r22, r20
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	ac 15       	cp	r26, r12
    186e:	bd 05       	cpc	r27, r13
    1870:	b1 f0       	breq	.+44     	; 0x189e <qtm_ptc_init_acquisition_module+0x68>
    1872:	ec 01       	movw	r28, r24
    1874:	ea 81       	ldd	r30, Y+2	; 0x02
    1876:	fb 81       	ldd	r31, Y+3	; 0x03
    1878:	ee 0d       	add	r30, r14
    187a:	ff 1d       	adc	r31, r15
    187c:	a0 80       	ld	r10, Z
    187e:	b1 80       	ldd	r11, Z+1	; 0x01
    1880:	2a 29       	or	r18, r10
    1882:	3b 29       	or	r19, r11
    1884:	82 80       	ldd	r8, Z+2	; 0x02
    1886:	93 80       	ldd	r9, Z+3	; 0x03
    1888:	a4 80       	ldd	r10, Z+4	; 0x04
    188a:	b5 80       	ldd	r11, Z+5	; 0x05
    188c:	48 29       	or	r20, r8
    188e:	59 29       	or	r21, r9
    1890:	6a 29       	or	r22, r10
    1892:	7b 29       	or	r23, r11
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	da e0       	ldi	r29, 0x0A	; 10
    1898:	ed 0e       	add	r14, r29
    189a:	f1 1c       	adc	r15, r1
    189c:	e7 cf       	rjmp	.-50     	; 0x186c <qtm_ptc_init_acquisition_module+0x36>
    189e:	41 15       	cp	r20, r1
    18a0:	51 05       	cpc	r21, r1
    18a2:	61 05       	cpc	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <qtm_ptc_init_acquisition_module+0x74>
    18a8:	4b c0       	rjmp	.+150    	; 0x1940 <qtm_ptc_init_acquisition_module+0x10a>
    18aa:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <touch_seq_lib_state>
    18ae:	4a 01       	movw	r8, r20
    18b0:	5b 01       	movw	r10, r22
    18b2:	88 24       	eor	r8, r8
    18b4:	aa 24       	eor	r10, r10
    18b6:	bb 24       	eor	r11, r11
    18b8:	6a 01       	movw	r12, r20
    18ba:	7b 01       	movw	r14, r22
    18bc:	cc 24       	eor	r12, r12
    18be:	dd 24       	eor	r13, r13
    18c0:	ff 24       	eor	r15, r15
    18c2:	87 2f       	mov	r24, r23
    18c4:	99 27       	eor	r25, r25
    18c6:	aa 27       	eor	r26, r26
    18c8:	bb 27       	eor	r27, r27
    18ca:	e1 11       	cpse	r30, r1
    18cc:	17 c0       	rjmp	.+46     	; 0x18fc <qtm_ptc_init_acquisition_module+0xc6>
    18ce:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    18d2:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    18d6:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    18da:	89 2c       	mov	r8, r9
    18dc:	9a 2c       	mov	r9, r10
    18de:	ab 2c       	mov	r10, r11
    18e0:	bb 24       	eor	r11, r11
    18e2:	80 92 f5 00 	sts	0x00F5, r8	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    18e6:	67 01       	movw	r12, r14
    18e8:	ee 24       	eor	r14, r14
    18ea:	ff 24       	eor	r15, r15
    18ec:	c0 92 f6 00 	sts	0x00F6, r12	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    18f0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <touch_seq_lib_state>
    18fa:	1e c0       	rjmp	.+60     	; 0x1938 <qtm_ptc_init_acquisition_module+0x102>
    18fc:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1900:	2e 2b       	or	r18, r30
    1902:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1906:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    190a:	23 2b       	or	r18, r19
    190c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1910:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    1914:	42 2b       	or	r20, r18
    1916:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    191a:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    191e:	29 29       	or	r18, r9
    1920:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    1924:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    1928:	2e 29       	or	r18, r14
    192a:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    192e:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    1932:	82 2b       	or	r24, r18
    1934:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <qtm_ptc_init_acquisition_module+0x10c>
    193c:	8b e0       	ldi	r24, 0x0B	; 11
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <qtm_ptc_init_acquisition_module+0x10c>
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	08 95       	ret

00001958 <qtm_ptc_qtlib_assign_signal_memory>:
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	31 f0       	breq	.+12     	; 0x1968 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    195c:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <qtm_raw_data_measurements_ptr+0x1>
    1960:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <qtm_raw_data_measurements_ptr>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	08 95       	ret
    1968:	8b e0       	ldi	r24, 0x0B	; 11
    196a:	08 95       	ret

0000196c <qtm_ptc_start_measurement_seq>:
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	00 d0       	rcall	.+0      	; 0x1972 <qtm_ptc_start_measurement_seq+0x6>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <qtm_ptc_start_measurement_seq+0x8>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <max_conversion_cycles>
    197c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <max_conversion_cycles+0x1>
    1980:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <max_conversion_cycles+0x2>
    1984:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <max_conversion_cycles+0x3>
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <qtm_ptc_start_measurement_seq+0x24>
    198e:	db c0       	rjmp	.+438    	; 0x1b46 <qtm_ptc_start_measurement_seq+0x1da>
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	09 f4       	brne	.+2      	; 0x1996 <qtm_ptc_start_measurement_seq+0x2a>
    1994:	d8 c0       	rjmp	.+432    	; 0x1b46 <qtm_ptc_start_measurement_seq+0x1da>
    1996:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <touch_seq_lib_state>
    199a:	22 23       	and	r18, r18
    199c:	09 f4       	brne	.+2      	; 0x19a0 <qtm_ptc_start_measurement_seq+0x34>
    199e:	d5 c0       	rjmp	.+426    	; 0x1b4a <qtm_ptc_start_measurement_seq+0x1de>
    19a0:	24 30       	cpi	r18, 0x04	; 4
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <qtm_ptc_start_measurement_seq+0x3a>
    19a4:	93 c0       	rjmp	.+294    	; 0x1acc <qtm_ptc_start_measurement_seq+0x160>
    19a6:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <ptc_eoc_ok_flag>
    19aa:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    19ae:	80 ff       	sbrs	r24, 0
    19b0:	8b c0       	rjmp	.+278    	; 0x1ac8 <qtm_ptc_start_measurement_seq+0x15c>
    19b2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	a6 e0       	ldi	r26, 0x06	; 6
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__umulhisi3>
    19c0:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <max_conversion_cycles>
    19c4:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <max_conversion_cycles+0x1>
    19c8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <max_conversion_cycles+0x2>
    19cc:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <max_conversion_cycles+0x3>
    19d0:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    19d4:	2f 70       	andi	r18, 0x0F	; 15
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	82 0f       	add	r24, r18
    19dc:	91 1d       	adc	r25, r1
    19de:	a1 1d       	adc	r26, r1
    19e0:	b1 1d       	adc	r27, r1
    19e2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <max_conversion_cycles>
    19e6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <max_conversion_cycles+0x1>
    19ea:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <max_conversion_cycles+0x2>
    19ee:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <max_conversion_cycles+0x3>
    19f2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    19f6:	27 70       	andi	r18, 0x07	; 7
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <qtm_ptc_start_measurement_seq+0x96>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	aa 1f       	adc	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	2a 95       	dec	r18
    1a04:	d2 f7       	brpl	.-12     	; 0x19fa <qtm_ptc_start_measurement_seq+0x8e>
    1a06:	0e 96       	adiw	r24, 0x0e	; 14
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <max_conversion_cycles>
    1a10:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <max_conversion_cycles+0x1>
    1a14:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <max_conversion_cycles+0x2>
    1a18:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <max_conversion_cycles+0x3>
    1a1c:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1a20:	23 70       	andi	r18, 0x03	; 3
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <qtm_ptc_start_measurement_seq+0xc0>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	aa 1f       	adc	r26, r26
    1a2a:	bb 1f       	adc	r27, r27
    1a2c:	2a 95       	dec	r18
    1a2e:	d2 f7       	brpl	.-12     	; 0x1a24 <qtm_ptc_start_measurement_seq+0xb8>
    1a30:	22 e0       	ldi	r18, 0x02	; 2
    1a32:	b6 95       	lsr	r27
    1a34:	a7 95       	ror	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	2a 95       	dec	r18
    1a3c:	d1 f7       	brne	.-12     	; 0x1a32 <qtm_ptc_start_measurement_seq+0xc6>
    1a3e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <max_conversion_cycles>
    1a42:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <max_conversion_cycles+0x1>
    1a46:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <max_conversion_cycles+0x2>
    1a4a:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <max_conversion_cycles+0x3>
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    1a50:	1a 82       	std	Y+2, r1	; 0x02
    1a52:	1b 82       	std	Y+3, r1	; 0x03
    1a54:	1c 82       	std	Y+4, r1	; 0x04
    1a56:	21 e0       	ldi	r18, 0x01	; 1
    1a58:	49 81       	ldd	r20, Y+1	; 0x01
    1a5a:	5a 81       	ldd	r21, Y+2	; 0x02
    1a5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1a5e:	7c 81       	ldd	r23, Y+4	; 0x04
    1a60:	48 17       	cp	r20, r24
    1a62:	59 07       	cpc	r21, r25
    1a64:	6a 07       	cpc	r22, r26
    1a66:	7b 07       	cpc	r23, r27
    1a68:	b0 f4       	brcc	.+44     	; 0x1a96 <qtm_ptc_start_measurement_seq+0x12a>
    1a6a:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <ptc_eoc_ok_flag>
    1a6e:	33 23       	and	r19, r19
    1a70:	29 f0       	breq	.+10     	; 0x1a7c <qtm_ptc_start_measurement_seq+0x110>
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	ab 83       	std	Y+3, r26	; 0x03
    1a78:	bc 83       	std	Y+4, r27	; 0x04
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	49 81       	ldd	r20, Y+1	; 0x01
    1a7e:	5a 81       	ldd	r21, Y+2	; 0x02
    1a80:	6b 81       	ldd	r22, Y+3	; 0x03
    1a82:	7c 81       	ldd	r23, Y+4	; 0x04
    1a84:	4f 5f       	subi	r20, 0xFF	; 255
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	6f 4f       	sbci	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	49 83       	std	Y+1, r20	; 0x01
    1a8e:	5a 83       	std	Y+2, r21	; 0x02
    1a90:	6b 83       	std	Y+3, r22	; 0x03
    1a92:	7c 83       	std	Y+4, r23	; 0x04
    1a94:	e1 cf       	rjmp	.-62     	; 0x1a58 <qtm_ptc_start_measurement_seq+0xec>
    1a96:	22 23       	and	r18, r18
    1a98:	b9 f0       	breq	.+46     	; 0x1ac8 <qtm_ptc_start_measurement_seq+0x15c>
    1a9a:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1a9e:	80 ff       	sbrs	r24, 0
    1aa0:	13 c0       	rjmp	.+38     	; 0x1ac8 <qtm_ptc_start_measurement_seq+0x15c>
    1aa2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1aa6:	00 00       	nop
    1aa8:	82 e1       	ldi	r24, 0x12	; 18
    1aaa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1aae:	00 00       	nop
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1ab6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <ptc_lockups>
    1aba:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <ptc_lockups+0x1>
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <ptc_lockups+0x1>
    1ac4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ptc_lockups>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	42 c0       	rjmp	.+132    	; 0x1b50 <qtm_ptc_start_measurement_seq+0x1e4>
    1acc:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1ad0:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1ad4:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <ptc_seq_measure_complete_pointer+0x1>
    1ad8:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <ptc_seq_measure_complete_pointer>
    1adc:	dc 01       	movw	r26, r24
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	80 34       	cpi	r24, 0x40	; 64
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <qtm_ptc_start_measurement_seq+0x180>
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <qtm_ptc_start_measurement_seq+0x186>
    1aec:	80 38       	cpi	r24, 0x80	; 128
    1aee:	79 f5       	brne	.+94     	; 0x1b4e <qtm_ptc_start_measurement_seq+0x1e2>
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1af6:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <qtm_acquisition_control_working_set_ptr>
    1afa:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <qtm_acquisition_control_working_set_ptr+0x1>
    1afe:	01 90       	ld	r0, Z+
    1b00:	f0 81       	ld	r31, Z
    1b02:	e0 2d       	mov	r30, r0
    1b04:	84 81       	ldd	r24, Z+4	; 0x04
    1b06:	80 31       	cpi	r24, 0x10	; 16
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <qtm_ptc_start_measurement_seq+0x1a0>
    1b0a:	80 e1       	ldi	r24, 0x10	; 16
    1b0c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	84 bf       	out	0x34, r24	; 52
    1b14:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7f8074>
    1b18:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <current_measure_channel+0x1>
    1b1c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <current_measure_channel>
    1b20:	0e 94 ad 09 	call	0x135a	; 0x135a <select_next_channel_to_measure>
    1b24:	81 11       	cpse	r24, r1
    1b26:	0b c0       	rjmp	.+22     	; 0x1b3e <qtm_ptc_start_measurement_seq+0x1d2>
    1b28:	84 e0       	ldi	r24, 0x04	; 4
    1b2a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <touch_seq_lib_state>
    1b2e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <current_measure_channel>
    1b32:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <current_measure_channel+0x1>
    1b36:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <qtm_measure_node>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <qtm_ptc_start_measurement_seq+0x1e4>
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <touch_seq_lib_state>
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <qtm_ptc_start_measurement_seq+0x1e4>
    1b46:	8b e0       	ldi	r24, 0x0B	; 11
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <qtm_ptc_start_measurement_seq+0x1e4>
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <qtm_ptc_start_measurement_seq+0x1e4>
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <qtm_enable_sensor_node>:
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	c9 f0       	breq	.+50     	; 0x1b94 <qtm_enable_sensor_node+0x36>
    1b62:	dc 01       	movw	r26, r24
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	20 81       	ld	r18, Z
    1b6c:	31 81       	ldd	r19, Z+1	; 0x01
    1b6e:	26 17       	cp	r18, r22
    1b70:	37 07       	cpc	r19, r23
    1b72:	90 f0       	brcs	.+36     	; 0x1b98 <qtm_enable_sensor_node+0x3a>
    1b74:	45 e0       	ldi	r20, 0x05	; 5
    1b76:	46 9f       	mul	r20, r22
    1b78:	90 01       	movw	r18, r0
    1b7a:	47 9f       	mul	r20, r23
    1b7c:	30 0d       	add	r19, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	14 96       	adiw	r26, 0x04	; 4
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	15 97       	sbiw	r26, 0x05	; 5
    1b88:	e2 0f       	add	r30, r18
    1b8a:	f3 1f       	adc	r31, r19
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 83       	st	Z, r24
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	08 95       	ret
    1b94:	8b e0       	ldi	r24, 0x0B	; 11
    1b96:	08 95       	ret
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	08 95       	ret

00001b9c <qtm_calibrate_sensor_node>:
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	d1 f1       	breq	.+116    	; 0x1c14 <qtm_calibrate_sensor_node+0x78>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	20 81       	ld	r18, Z
    1baa:	31 81       	ldd	r19, Z+1	; 0x01
    1bac:	26 17       	cp	r18, r22
    1bae:	37 07       	cpc	r19, r23
    1bb0:	98 f1       	brcs	.+102    	; 0x1c18 <qtm_calibrate_sensor_node+0x7c>
    1bb2:	22 81       	ldd	r18, Z+2	; 0x02
    1bb4:	14 96       	adiw	r26, 0x04	; 4
    1bb6:	ed 91       	ld	r30, X+
    1bb8:	fc 91       	ld	r31, X
    1bba:	15 97       	sbiw	r26, 0x05	; 5
    1bbc:	20 34       	cpi	r18, 0x40	; 64
    1bbe:	59 f4       	brne	.+22     	; 0x1bd6 <qtm_calibrate_sensor_node+0x3a>
    1bc0:	85 e0       	ldi	r24, 0x05	; 5
    1bc2:	86 9f       	mul	r24, r22
    1bc4:	d0 01       	movw	r26, r0
    1bc6:	87 9f       	mul	r24, r23
    1bc8:	b0 0d       	add	r27, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	ae 0f       	add	r26, r30
    1bce:	bf 1f       	adc	r27, r31
    1bd0:	84 e3       	ldi	r24, 0x34	; 52
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0c c0       	rjmp	.+24     	; 0x1bee <qtm_calibrate_sensor_node+0x52>
    1bd6:	20 38       	cpi	r18, 0x80	; 128
    1bd8:	81 f4       	brne	.+32     	; 0x1bfa <qtm_calibrate_sensor_node+0x5e>
    1bda:	85 e0       	ldi	r24, 0x05	; 5
    1bdc:	86 9f       	mul	r24, r22
    1bde:	d0 01       	movw	r26, r0
    1be0:	87 9f       	mul	r24, r23
    1be2:	b0 0d       	add	r27, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	ae 0f       	add	r26, r30
    1be8:	bf 1f       	adc	r27, r31
    1bea:	87 e6       	ldi	r24, 0x67	; 103
    1bec:	95 e0       	ldi	r25, 0x05	; 5
    1bee:	14 96       	adiw	r26, 0x04	; 4
    1bf0:	9c 93       	st	X, r25
    1bf2:	8e 93       	st	-X, r24
    1bf4:	13 97       	sbiw	r26, 0x03	; 3
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <qtm_calibrate_sensor_node+0x60>
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	95 e0       	ldi	r25, 0x05	; 5
    1bfe:	96 9f       	mul	r25, r22
    1c00:	90 01       	movw	r18, r0
    1c02:	97 9f       	mul	r25, r23
    1c04:	30 0d       	add	r19, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	90 81       	ld	r25, Z
    1c0e:	92 60       	ori	r25, 0x02	; 2
    1c10:	90 83       	st	Z, r25
    1c12:	08 95       	ret
    1c14:	8b e0       	ldi	r24, 0x0B	; 11
    1c16:	08 95       	ret
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	08 95       	ret

00001c1c <qtm_m324pb_ptc_handler_eoc>:
    1c1c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1c20:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1c24:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    1c28:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <current_measure_channel>
    1c2c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <current_measure_channel+0x1>
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <qtm_raw_data_measurements_ptr>
    1c38:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <qtm_raw_data_measurements_ptr+0x1>
    1c3c:	e4 0f       	add	r30, r20
    1c3e:	f5 1f       	adc	r31, r21
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	92 2b       	or	r25, r18
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <good_eocs>
    1c4c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <good_eocs+0x1>
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <good_eocs+0x1>
    1c56:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <good_eocs>
    1c5a:	89 2b       	or	r24, r25
    1c5c:	21 f4       	brne	.+8      	; 0x1c66 <qtm_m324pb_ptc_handler_eoc+0x4a>
    1c5e:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <ptc_lockups+0x1>
    1c62:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <ptc_lockups>
    1c66:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <current_measure_channel>
    1c6a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <current_measure_channel+0x1>
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <current_measure_channel+0x1>
    1c74:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <current_measure_channel>
    1c78:	0e 94 ad 09 	call	0x135a	; 0x135a <select_next_channel_to_measure>
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	0a c0       	rjmp	.+20     	; 0x1c94 <qtm_m324pb_ptc_handler_eoc+0x78>
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <touch_seq_lib_state>
    1c86:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <current_measure_channel>
    1c8a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <current_measure_channel+0x1>
    1c8e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <qtm_measure_node>
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <qtm_m324pb_ptc_handler_eoc+0x82>
    1c94:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ptc_seq_measure_complete_pointer>
    1c98:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ptc_seq_measure_complete_pointer+0x1>
    1c9c:	09 95       	icall
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <ptc_eoc_ok_flag>
    1ca4:	08 95       	ret

00001ca6 <__umulhisi3>:
    1ca6:	a2 9f       	mul	r26, r18
    1ca8:	b0 01       	movw	r22, r0
    1caa:	b3 9f       	mul	r27, r19
    1cac:	c0 01       	movw	r24, r0
    1cae:	a3 9f       	mul	r26, r19
    1cb0:	70 0d       	add	r23, r0
    1cb2:	81 1d       	adc	r24, r1
    1cb4:	11 24       	eor	r1, r1
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	b2 9f       	mul	r27, r18
    1cba:	70 0d       	add	r23, r0
    1cbc:	81 1d       	adc	r24, r1
    1cbe:	11 24       	eor	r1, r1
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	08 95       	ret

00001cc4 <_exit>:
    1cc4:	f8 94       	cli

00001cc6 <__stop_program>:
    1cc6:	ff cf       	rjmp	.-2      	; 0x1cc6 <__stop_program>
